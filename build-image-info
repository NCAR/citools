#!/bin/sh
PROG=build-image-info
DESC="Build a file containing CI-relevant metadata about a docker image"
VERSION=0.1.0
USAGE1="${PROG} [--tag=<release_tag>] [outdir]"
USAGE2="${PROG} -h|--help"
USAGE3="${PROG} --version"
USAGE="Usage:
    ${USAGE1}
    ${USAGE2}
    ${USAGE3}"

# This script uses primitive but portable dialects of sh and awk
PATH="/usr/local/bin:/usr/local/sbin:/bin:/sbin:/usr/bin:/usr/sbin"
export PATH
OUTDIR=.
RELEASE_TAG="${RELEASE_TAG:-${CIRCLE_TAG}}"

while test $# != 0 ; do
    case $1 in
      -h|--help)
          cat <<EOF
NAME
    $PROG - $DESC

SYNOPSIS
    $USAGE1
    $USAGE2
    $USAGE3

DESCRIPTION
    This script extracts data from "docker build" output and supplements
    it with "docker inspect" output and data from git; it writes the collected
    metadata to a file called "<release_tag>-<timestamp>", where <release_tag>
    is the (semantic) version number, and <timestamp> is the UTC image
    creation time, in the format "YYYYmmdd.HHMMSSZ" (year, month, day, hour,
    minute, second, literal "Z" indicating UTC). This name is appropriate
    as the name of a github release asset and as a docker image tag.

    The script is meant to be executed as part of an automated build when a
    "release tag" (version number) is assigned to a release. In CircleCI,
    the release tag is available in the CIRCLE_TAG environment variable
    when a "tag build" is triggered.

    The generated file contains "<parameter>=<value>" definitions, one per
    line:

      Parameter         Value
      ---------         -----
      IMAGE_NAME        The "<release_tag>-<timestamp>" name
      RELEASE_TAG       The release tag (version number) if known
      RELEASE_SHA1      The full sha1 hash of the current git   commit
      REPO_OWNER        The username of the github repo owner
      REPO_NAME         The name of the github repo
      IMAGE_DIGEST      The digest of the image (with leading "sha256:")
      IMAGE_ID          The first 12 characters of the image digest
      IMAGE_CREATED     The ISO8601 UTC creation time of the image (nanosecond
                        resolution)
      BASE_TAG          The full (pullable) "tag name" of the base image
      BASE_DIGEST       The full (pullable) "digest name" of the base image
      BASE_REPO_OWNER   The username of the github repo owner of the base image
                        project, if known (see docker-cibuild)
      BASE_REPO_NAME    The name of the github repo of the base image project,
                        if known (see docker-cibuild)
      BASE_RELEASE_TAG  The release tag of the base image, if known (see
                        docker-cibuild)

    The "docker build" output is read from standard input. The basename
    of the output file is written to standard output.

    The following command-line arguments are supported:

    --tag=<release_tag>
        The release tag (version number); if not given, the environment
        variables RELEASE_TAG or CIRCLE_TAG are used if set.

    -h|--help
        Print a help message and quit.

    --version
        Print the name and version of the script and quit.

    [outdir]
        If given, the name of the directory where the output file is written.
        The default is ".".

EOF
          exit 0 ;;
      --version)
          echo "$PROG - v$VERSION"
          exit 0 ;;
      --tag=*)
          RELEASE_TAG=`expr "$1" : "--tag=\(.*\)"` ;;
      -*)
          echo "${PROG}: unknown option: $1" >&2
          exit 1 ;;
      *)
          OUTDIR="$1"
          if [ ! -d "$OUTDIR" ] ; then
              mkdir -p "$OUTDIR" || exit 1
          fi ;;
    esac
    shift
done

if test ":$RELEASE_TAG" = ":" ; then
    echo "${PROG}: No release tag" >&2
    echo "  --tag argument or RELEASE_TAG/CIRCLE_TAG variable must be set" >&2
    exit 1
fi

eval `awk '
BEGIN { state = "looking" }
/^Step [0-9]+\/[0-9]+ : [fF][rR][oO][mM]/ {
    state = "sawfrom"
    next
}
/^ ---> [0-9a-f]*$/ {
    if (state == "sawfrom") {
        baseId = $2
    }
    state = "looking"
}
/^Successfully built / {
    id = $3
}
{
    next
}
END {
    if ((baseId != "") && (id != "")) {
        printf("baseId=%s imageId=%s\n",baseId,id);
    }
}'`

releaseSha1=`git rev-list HEAD | head -1`
IFS_SAVE="${IFS}"
IFS="${IFS}/"
set `git config --get remote.origin.url`
IFS="${IFS_SAVE}"
while [ $# -gt 2 ] ; do shift ; done
repoOwner="$1"
repoName=`basename "$2" .git`
set `docker inspect --format='{{.Id}} {{.Created}}' ${imageId}`
imageDigest="$1"
imageCreated="$2"
if test ":${baseId}" != ":" ; then
    set `docker inspect --format='{{index .RepoTags 0}} {{index .RepoDigests 0}} {{index .Config.Labels "git.remote.origin"}} {{index .Config.Labels "git.release.tag"}}' ${baseId}`
    baseTag="$1"
    baseDigest="$2"
    baseRemoteOrigin="$3"
    baseReleaseTag="$4"
echo ARGS=$@ >&2
    IFS="${IFS}/"
    eval set : $baseRemoteOrigin
    shift
    IFS="${IFS_SAVE}"
    while [ $# -gt 2 ] ; do shift ; done
    baseRepoOwner="$1"
    baseRepoName="$2"
fi
nameTstamp=`echo "$imageCreated" |
   sed -e 's/-//g' -e 's/://g' -e 's/\..*Z/Z/' -e 's/T/./'`
imageName="${RELEASE_TAG}-${nameTstamp}"

cat >"${OUTDIR}/${imageName}" <<EOF
IMAGE_NAME=$imageName
RELEASE_TAG=$RELEASE_TAG
RELEASE_SHA1=$releaseSha1
REPO_OWNER=$repoOwner
REPO_NAME=$repoName
IMAGE_DIGEST=$imageDigest
IMAGE_ID=$imageId
IMAGE_CREATED=$imageCreated
BASE_TAG=$baseTag
BASE_DIGEST=$baseDigest
EOF
if test ":$baseRepoOwner$baseRepoName$baseReleaseTag" != ":" ; then
    cat >>"${OUTDIR}/${filename}" <<EOF
BASE_REPO_OWNER=$baseRepoOwner
BASE_REPO_NAME=$baseRepoName
BASE_RELEASE_TAG=$baseReleaseTag
EOF
fi
echo ${imageName}
exit 0

