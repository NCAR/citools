#!/bin/sh
PROG=cibuild
DESC="Front-end script for docker build used in a CI pipeline"
USAGE1="${PROG} [--ci-version <git_tag>] <docker_build_args...>"
USAGE2="${PROG} <docker_build_args...>"
USAGE="Usage:
    ${USAGE1}
    ${USAGE2}"

# This script is written in a portable dialect of sh

PROGDIR=`dirname "$0"`

HELP=n
TAGS=
RETag='[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*-[^+][^+]*[+]\([^.]*\.\)*base\..*'
#
# Process command line, leaving it intact except for --ci-version, which
# is removed, and --help, which is processed immediately
#
set : "$@" ===
shift
while test ":$1" != ":===" ; do
    arg="$1"
    shift
    case ${arg} in
      --help)
        HELP=y ;;
      --ci-version)
        if expr "X$1" : "X${RETag}" >/dev/null ; then
            TAGS="$1"
        else
            echo "${PROG}: --ci-version argument is not a valid tag" >&2
            exit 1
        fi
        shift ;;
      *)
        set : "$@" "${arg}"
        shift
    esac
done
shift

if test "$HELP" = "y" ; then
    cat <<EOF
NAME
    $PROG - $DESC

SYNOPSIS
    $USAGE1

    $USAGE2

DESCRIPTION
    This script is meant to be run in a CI pipeline; it runs "docker build"
    with arguments it determines from the command line and/or the git
    environment.

    The script recognizes special git tags with a particular format,
    consistent with the "semantic versioning" spec:

        <M>.<m>.<p>-<prv>+base.<repouser>.<reponame>.<version>

    where <M> is a major version number, <m> is a minor version number, <p> is
    a patch number, <prv> is a pre-release version string, <repouser> is a
    dockerhub repo user string, <reponame> is a base image repo name, and
    <version> is a version string.

    The portion of the tag following "base." identifies the base image for
    the container. Note that the <repouser> with its leading dot is optional;
    it is omitted when the base image is an official docker hub "library"
    image like "alpine".

    By default, the script will use the latest git tag of this form that it
    can find to define the specific base image to use. It assumes the
    Dockerfile starts like this:

        ARG REPOUSER=<default_repo_user/>
        ARG VERSION=
        FROM \${REPOUSER}<reponame>:\${VERSION}

    If a tag is provided on the command-line via the --ci-version option, the
    script will use it rather tha any existing git tags; it will also attach
    the tag to the image if it is not already attached.

    All command-line arguments except "--help" and "--ci_version <git_tag>"
    are passed verbatim to "docker build".

EOF
    exit 0
fi

if test ":${TAGS}" = ":" ; then
    TAGS=`git tags | grep "^${RETag}"`
fi
    base=`expr "X${TAGS}" : 'X.*+.*base\.\(.*\)'`
    echo "base=${base}"
fi
echo "TAGS=${TAGS}"

exit 0








