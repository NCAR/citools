#!/bin/sh
PROG=cicada-client-init
DESC="Initialize CICADA in a client workflow"
USAGE1="${PROG} [--check]"

HELP_DESC="
This script initializes the CICADA package. It is meant to be run
at the start of a workflow.
"
HELP_OPTS="
--check
    If present, the script will verify that all expected variables and
    files have been initialized. This is meant to be used by cicada-*
    scripts.
"
HELP_ENV="
This script assumes that all environment variables managed by "circle-env"
have been initialized. It will ensure that the following environment
variables are also set:

 AUTODEPLOY_AUTOMATIC_BUILD
     A boolean string (see \"truthy\" script) that is true to enable
     auto-deployment of builds with a \$TRIGGER_TYPE of \"automatic\".
     \"Auto-deployment\" is deployment without an explicit, manual CICADA
     approval; it is only allowed when deploying to the default
     environment (see DEFAULT_DEPLOY_ENV); deployment to any other
     environment always requires explicit manual approval. When
     \$TRIGGER_TYPE is \"manual\", auto-deployment to the default
     environment is always enabled. This variable is defined in the
     CICADA configuration.

 CICADA_BRANCH_CONFIG
     Name of the CICADA branch containing configuration files.

 CICADA_BRANCH_LOGS
     Name of the CICADA branch containing logs.

 CICADA_CLONE_DIR
     Name of the local directory containing CICADA clones.

 DEFAULT_DEPLOY_ENV
     The first environment in the \$PRERELEASE_ENVIRONMENTS list.
     Manually-triggered build/deployments to the default environment do
     not required explicit manual approval via the CICADA repo.
     Automatically-triggered build/deployments to the default environment
     *do* require explicit manual approval unless the
     AUTODEPLOY_AUTOMATIC_BUILD variable is true.

 DEPLOY_ENV
     The deployment environment for the current build.

 GH_TOKEN
     A GitHub Personal API Token for accessing the CICADA repo.

 IMAGE_METADATA_CACHE
     Name of a file containing image metadata for the current image.

 IMAGE_TAG_CACHE
     Name of a file containing the unique tag for the current image.

 PRERELEASE_ENVIRONMENTS
     An ordered list of valid prerelease environments. This variable
     is defined in the CICADA configuration.

 PRODUCTION_ENVIRONMENT
     The name of the production deployment environment. This variable is
     defined in the CICADA configuration.

 RELEASE_ID
     The id of the GitHub release object for the \$CIRCLE_TAG release.

 RELEASE_OBJ_ASSET_ID_CACHE
     Name of a file containing the asset id for the image metadata file,
     which is stored as an asset of the release.

 RELEASE_OBJ_ASSET_LIST
     Name of a file containing the list of assets belonging to the release.

 RELEASE_OBJ_CACHE
     Name of a file containing the current release object's metadata.

 REPO
     \$CIRCLE_PROJECT_USERNAME/\$CIRCLE_PROJECT_REPONAME

 TRIGGER_TYPE
     The type of trigger for the current job; either \"manual\" or
     \"automatic\".
"
SCRIPTDIR=`cd \`dirname $0\`; pwd`
SCRIPTPARENT=`dirname ${SCRIPTDIR}`

. ${SCRIPTPARENT}/citools-basics.rc || exit 1

PATH="${SCRIPTPARENT}:${SCRIPTDIR}:$PATH" export PATH

if [ ":${CITOOLS_CIRCLE_ENV}" != ":true" ] ; then
    . "${INIT_RC}" || exit 1
fi
# Verify all basic environment variables are set
circle-env || exit 1

#
# Ensure the following variables are set.
#
EXT_VARS="
 CIRCLE_TAG
 CIRCLE_TAG_NUM
 CIRCLE_PROJECT_REPONAME
 CIRCLE_PROJECT_USERNAME
 GH_TOKEN
"
VARS1="
 GH_TOKEN
 IMAGE_METADATA_CACHE
 IMAGE_TAG_CACHE
 RELEASE_OBJ_ASSET_ID_CACHE
 RELEASE_OBJ_ASSET_LIST
 RELEASE_OBJ_CACHE
 REPO
 REPO_NAME
 REPO_OWNER
 TRIGGER_TYPE
"
VARS2="
 DEFAULT_DEPLOY_ENV
 DEPLOY_ENV
 PRERELEASE_ENVIRONMENTS
 PRODUCTION_ENVIRONMENT
 RELEASE_ID
"

finally=":"
if [ ":$1" = ":--check" ] ; then
    checkvars="${VARS1} ${VARS2}"
else
    checkvars="${EXT_VARS}"
fi
for var in ${checkvars} ; do
    eval val=\"\$${var}\"
    if [ ":${val}" = ":" ] ; then
        echo "${PROG}: environment variable ${var} must be defined" >&2
        finally="exit 1"
    fi
done
eval ${finally}

if [ ":$1" = ":--check" ] ; then
    for file in ${RELEASE_OBJ_CACHE} ${RELEASE_OBJ_ASSET_LIST} ; do
        if [ ! -f "${file}" ] ; then
            echo "${PROG}: ${file}: no such file" >&2
            finally="exit 1"
        fi
    done
    eval ${finally}
    exit 0
fi

# Set manifest cicada constants
. cicada-env.rc || exit 1

CICADA_CLONE_DIR="${STATEDIR}/cicada"
IMAGE_METADATA_CACHE="${STATEDIR}/image_metadata.json"
IMAGE_TAG_CACHE="${STATEDIR}/image_tag"
RELEASE_OBJ_ASSET_ID_CACHE="${STATEDIR}/release_assets_id"
RELEASE_OBJ_ASSET_LIST="${STATEDIR}/release_assets.json"
RELEASE_OBJ_CACHE="${STATEDIR}/release.json"
REPO_NAME="${REPO_NAME:-${CIRCLE_PROJECT_REPONAME}}"
REPO_OWNER="${REPO_OWNER:-${CIRCLE_PROJECT_USERNAME}}"
REPO="${REPO_OWNER}/${REPO_NAME}"
if expr "${CIRCLE_TAG_META}" : "\+auto.*" >/dev/null ] ; then
    TRIGGER_TYPE=automatic
else
    TRIGGER_TYPE=manual
fi
for var in ${VARS1} ; do
    eval val=\"\$${var}\"
    vecho "${var}=${val}"
    export "${var}"
done

RELEASE_ID_CACHE="${STATEDIR}/release_id"

vecho "Running github-get /repos/${REPO}/releases/tags/${CIRCLE_TAG}"
github-get "/repos/${REPO}/releases/tags/${CIRCLE_TAG}" >${RELEASE_OBJ_CACHE}
if [ $? != 0 ] ; then
    cat ${RELEASE_OBJ_CACHE} >&2
    echo "${PROG}: unable to access release object for ${CIRCLE_TAG}" >&2
    exit 1
fi
RELEASE_ID=`jq '.id' <${RELEASE_OBJ_CACHE}`
if expr "${RELEASE_ID}" : '[0-9][0-9]*$' >/dev/null ] ; then
    export RELEASE_ID
else
    echo "${PROG}: unable to retrieve release id" >&2
    exit 1
fi

# Get a list of all assets
vecho "Running github-get /repos/${REPO}/releases/${RELEASE_ID}/assets"
github-get "/repos/${REPO}/releases/${RELEASE_ID}/assets" >${RELEASE_OBJ_ASSET_LIST}
if [ $? != 0 ] ; then
    cat ${RELEASE_OBJ_ASSET_LIST} >&2
    echo "${PROG}: unable to retrieve release asset list" >&2
    exit 1
fi

# Shallow-clone needed stuff from the CICADA repo
CICADA_CONFIG_DIR="${CICADA_CLONE_DIR}/${CICADA_BRANCH_CONFIG}"
CICADA_LOGS_DIR="${CICADA_CLONE_DIR}/${CICADA_BRANCH_LOGS}"
for branch in ${CICADA_BRANCH_CONFIG} ${CICADA_BRANCH_LOGS} ; do
    cicada-clone-branch --dir ${CICADA_CLONE_DIR} ${branch} || exit 1
done

# Apply CICADA config
. "${CICADA_CONFIG_DIR}/DEFAULTS.rc" || exit 1
. "${CICADA_CONFIF_DIR}/${CIRCLE_PROJECT_REPONAME}.rc" || exit 1
DEPLOY_ENV=
if [ ":${CIRCLE_TAG_PRERELEASE}" = ":" ] ; then
    DEPLOY_ENV=${PRODUCTION_ENVIRONMENT}
else
    for env in ${PRERELEASE_ENVIRONMENTS} ; do
        if [ ":-${env}" = :${prerelease} ] ; then
            DEPLOY_ENV="${env}"
            break
        fi
    done
fi
DEFAULT_DEPLOY_ENV=`expr "${PRERELEASE_ENVIRONMENTS}" : ' *\([^ ]*\)'`
for var in ${VARS2} ; do
    export ${var}
done

cicada-release-check || exit 1

for var in ${VARS1} ${VARS2} ; do
    echo "${var}='${val}' export ${var}" >>${INIT_RC}
done
exit 0


