:
#
# Handle common cicada environment variable defaults and command-line
# overrides for cicada-log-* commands. Source this instead of
# citools-basics.rc. It ensures the following variables are set:
#
VARS="
 CICADA_LOGS
 STARTBRANCH
 LOGBRANCH
 LOGRECORD_FORMAT
 APPROVED_CLAUSE
 DEPLOYED_CLAUSE
 PROJECT
 DEPLOY_ENV
 LOGFILE
 GH_TOKEN
"
HELP_ENV="
ENVIRONMENT
    CIRCLE_PROJECT_REPONAME
        The name of the active project repository. Set by CircleCI.

    DEPLOY_ENV
        The deployment environment.

    STATEDIR
        The location of the state directory in the workspace.

    GH_TOKEN
        A GitHub Personal Access Token that allows write access to the
        master branch of the CICADA repo.
"
SCRIPTPARENT=`dirname ${SCRIPTDIR}`
. ${SCRIPTPARENT}/citools-basics.rc || exit 1
PATH="${SCRIPTPARENT}:${SCRIPTDIR}:$PATH" export PATH

# Verify all needed environment variables are set
circle-env || exit 1

# Set manifest cicada constants
. cicada-env.rc || exit 1

case $CIRCLE_PROJECT_REPONAME in
    '')
        echo "${PROG}: not a CircleCI job" >&2
        exit 1 ;;
    CICADA)
        CICADA_LOGS=`git rev-parse --show-toplevel`
        git fetch || exit 1 ;;
    *)
        cicada-client-init --check || exit 1 ;;
esac

cd "${CICADA_LOGS}" || exit 1

STARTBRANCH=`git branch | sed -n -e 's/\* //p'`
if [ ":${STARTBRANCH}" != ":${LOGBRANCH}" ] ; then
    trap "git checkout ${STARTBRANCH} ; exit 1" 0 1 2 13 15
    git checkout logs || exit 1
fi
LOGRECORD_FORMAT='${PROJECT}:${IMAGE_TAG} ${TYPE_CLAUSE} ${DEPLOY_ENV}${LOGDETAIL}'
APPROVED_CLAUSE="approved for deployment to"
DEPLOYED_CLAUSE="deployed to"

PROJECT="${CIRCLE_PROJECT_REPONAME}"

set : "$@" CICADA_END
shift
while [ ":$1" != ":CICADA_END" ] ; do
    arg="$1"
    shift
    case $arg in
        --project=*)
            PROJECT=`expr "${arg}" : '--project=\(.*\)'` ;;
        --deploy-env=*)
            DEPLOY_ENV=`expr "${arg}" : '--deploy-env=\(.*\)'` ;;
        --image-tag=*)
            IMAGE_TAG=`expr "${arg}" : '--image-tag=\(.*\)'` ;;
        --type=*)
            TYPE_ARG=`expr "${arg}" : '--type=\(.*\)'` ;;
        *)
            set : "$@" "${arg}"
            shift ;;
    esac
done
shift

case ${TYPE_ARG} in
   approved)
       TYPE=${TYPE_ARG}
       TYPE_CLAUSE="${APPROVED_CLAUSE}" ;;
   deployed)
       TYPE=${TYPE_ARG}
       TYPE_CLAUSE="${DEPLOYED_CLAUSE}" ;;
   '')
       : ;;
   *)
       echo "${PROG}: --type must be \"approved\" or \"deployed\"" >&2
       exit 1 ;;
esac

LOGFILE="logs/${PROJECT}/${DEPLOY_ENV}.log"

finally=:
for var in ${VARS} ; do
    eval val=\"\$${var}\"
    if [ ":${val}" = ":" ] ; then
        echo "${PROG}: ${var} must be set" >&2
        finally="exit 1"
    fi
    vecho "${var}=${val}"
    export ${var}
done
eval ${finally}


