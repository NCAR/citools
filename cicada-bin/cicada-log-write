#!/bin/sh
PROG="cicada-log-write"
DESC="Write to a CICADA log"
USAGE1="${PROG} [--project=<project>] --deploy-env=<deploy_env>
                     --type=approved|deployed --image-tag=<image_tag>
                     [<details>]"
HELP_DESC="
This script writes a log message to the CICADA GitHub repo.

Every log message is associated with a project (target repo), an image tag,
a type, and a deployment environment. The start of every log entry has a
distinct format that allows the logs to be searched unambiguously.
"
HELP_OPTS="
--deploy-env=<deploy_env>
    The deployment environment (required if DEPLOY_ENV environment variable
    is not set).

--image-tag=<image_tag>
    The image tag to include in the message (required). An image tag has
    the form <semver_num>-<timestamp><semver_meta>, where <semver_num> is
    the \"major.minor.patch\" part of the release tag, <timestamp> is the
    UTC creation time of a specific image, and <semver_meta> is the metadata
    portion of the release tag, with \"+\" replaced by \".\".

--project=<project>
    The project (GitHub repo) that is the subject of the log entry. If not
    set, the CIRCLE_PROJECT_REPONAME environment variable is checked for a
    default value.

--type=approved|deployed
    The approval type (required).
"
HELP_ARGS="
<details>
    Optional details (i.e., a user who triggered an event) that will be
    included at the end of the log message.
"
IMAGE_TAG=
TYPE=

SCRIPTDIR=`cd \`dirname $0\`; pwd`
. ${SCRIPTDIR}/cicada-log-setup.rc || exit 1

LOGDETAIL="$@"

if [ ":${IMAGE_TAG}" = ":" ] ; then
    echo "${PROG}: --image-tag is required" >&2
    exit 1
fi
if [ ":${TYPE}" = ":" ] ; then
    echo "${PROG}: --type is required" >&2
    exit 1
fi

LOGMSG=`eval echo "\"${LOGRECORD_FORMAT}\""`

LOGDIR=`dirname "${LOGFILE}"`
mkdir -p "${LOGDIR}" || exit 1

#
# Make entry in log file and push
#
TSTAMP=`date "+%Y-%m-%dT%H:%M:%S%z"`
echo "${TSTAMP} ${LOGMSG}" >>${LOGFILE}

git add "${LOGFILE}" || exit 1
for try in 1 2 3 ; do
    git commit -m "${LOGMSG}" && git push
    if [ $? = 0 ] ; then
        . cicada-log-cleanup.rc
        exit 0
    else
        sleep 2
        git pull
    fi
done
exit 1

