#!/bin/sh
PROG=cicada-request-approval
DESC="Check with CICADA if an image can be deployed"
USAGE1="${PROG}"

HELP_DESC="
CICADA logs deployment approvals to log files in the master branch of
the CICADA repo. Approvals are triggered by committing an image metadata
file to the appropriate \"project\" branch of the CICADA repo.

Deployments to the default environment (i.e, the first entry in the
\$PRERELEASE_ENVIRONMENTS list) are automatically approved when
\$TRIGGER_TYPE is \"manual\", even if no explicit approval has been
logged. When \$TRIGGER_TYPE is \"automatic\", deployments to the default
environment are only approved automatically if
\$AUTODEPLOY_AUTOMATIC_BUILD is true.

If a deployment is not automatically approved, the script reads the
appropriate log file to determine if an image has been approved for
deployment. If it has not, the script will create a new temporary CICADA
branch and write the metadata file to it, commit and push the update,
and then submit a \"pull request\" to merge the new file into the
appropriate project branch.
"
SCRIPTDIR=`cd \`dirname $0\`; pwd`
SCRIPTPARENT=`dirname ${SCRIPTDIR}`
. ${SCRIPTPARENT}/citools-basics.rc || exit 1
PATH="${SCRIPTPARENT}:${SCRIPTDIR}:$PATH" export PATH

cicada-client-init --check || exit 1

# Check for autometic deployments
if [ "${DEPLOY_ENV}" = "${DEFAULT_DEPLOY_ENV}" ] ; then
    if [ "${TRIGGER_TYPE}" = "manual" ] ; then
        echo "Auto-deployment to ${DEPLOY_ENV} allowed for manual builds"
        exit 0
    elif truthy "${AUTODEPLOY_AUTOMATIC_BUILD}" ; then
        echo "Auto-deployment to ${DEPLOY_ENV} enabled for automatic builds"
        exit 0
    else
        echo "Auto-deployment to ${DEPLOY_ENV} disabled for automatic builds"
    fi
fi

IMAGE_TAG=`cicada-image-get-metadata IMAGE_TAG` || exit 1
entry=`cicada-log-read --image-tag="${IMAGE_TAG}" --type=approved | tail -1`
if [ ":${entry}" != ":" ] ; then
    echo "${entry}"
    exit 0
fi

echo "Deployment not approved"

set -e

branch="${CIRCLE_PROJECT_REPONAME}-${DEPLOY_ENV}"
vecho "Cloning branch ${branch}..."
cicada-clone-branch ${branch}

cd ${CICADA_CLONE_DIR}/branch

tstamp=`echo "${IMAGE_TAG}" | sed -e 's/[^-]*-\([^.]*\).*/\1/'`
TEMP_BRANCH="${branch}-${tstamp}"

vecho "Running git checkout -b ${TEMP_BRANCH}"
git checkout -b ${TEMP_BRANCH}

revision=`git rev-parse HEAD`
url=`git config --get remote.origin.url`
desc="New unapproved image (${IMAGE_TAG}) for ${branch}"

vecho "Copying ${IMAGE_METADATA_CACHE} to ${IMAGE_TAG}"
cp "${IMAGE_METADATA_CACHE}" "${IMAGE_TAG}"

vecho "Running git add ${IMAGE_TAG}..."
git add "${IMAGE_TAG}"

vecho "Running git commit..."
git commit -m "${desc}"

vecho "Running git push -u origin ${TEMP_BRANCH}..."
git push -u origin "${TEMP_BRANCH}"

body="{
  \"title\": \"${desc}\",
  \"head\": \"${TEMP_BRANCH}\",
  \"base\": \"${branch}\",
  \"body\": \"From ${CIRCLE_BUILD_URL}, trigger type=${TRIGGER_TYPE}\",
  \"maintainer_can_modify\": false
}"
vecho "Pull request POST body: ${body}"
vecho "Running github-post /repos/${CICADA_REPO}/pulls..."
resp=`echo "${body}" | github-post /repos/${CICADA_REPO}/pulls`
vecho "Response=${resp}"

echo "Request queued with CICADA"
exit 1




