#!/bin/sh
PROG=cicada-init
DESC="Initialize a CircleCI workspace for CICADA deployments"
USAGE1="${PROG}"
USAGE2="${PROG} -h|--help"
USAGE3="${PROG} --version"
SCRIPT_VERSION=0.0.1

HELP_TEXT="
NAME
    $PROG - $DESC

SYNOPSIS
    $USAGE1
    $USAGE2
    $USAGE3

DESCRIPTION
    This script initializes a CircleCI workspace for CICADA deployments.
    It must be run from inside a clone of a project's git repository. It is
    meant to be run from a CircleCI job.

    The script will first check whether the current build is for a tag (i.e.
    if the CIRCLE_TAG environment variable is set). If it is not, there is
    nothing to do, so the script will exit.

    Otherwise, the script will verify that there is a GitHub \"release\"
    object corresponding to \$CIRCLE_TAG and make sure it conforms to
    conventions used by CICADA.

    The CICADA framework prescribes that release objects have the following
    attributes:
     - The associated tag is a valid semantic version string.
     - If the tag has a pre-release component, it must be an approved name;
       approved names can be defined in the PRERELEASE_ENVIRONMENTS
       environment variable.
     - The release *name* is the numeric (major.minor.patch) portion of the
       release *tag*
     - The release is associated with a specific commit SHA (not a branch).
     - The \"prerelease\" flag is false if and only if the tag has no
       pre-release component.
     - When an associated image is deployed, an image metadata file with
       the name <semver_num>_<timestamp>[<semver_meta>] is uploaded as an
       asset to the release, where <semver_num> is the \"major.minor.patch\"
       part of the release tag and <semver_meta> is the metadata portion of
       the release tag (with its leading \"+\", if it is not empty).
     - If there is no metadata file asset corresponding to the current
       release tag, the release tag must have a \"prerelease\" component
       whose name matches the default deployment environment
       (\$DEFAULT_ENVIRONMENT).

    If either of the first two prescriptions is invalid, the script will
    write an error message and return 1, which should cause the invoking
    CircleCI job to fail.

    The script will enforce the remaining prescriptions by modifying the
    release object if necessary. If the last prescription causes the release
    tag to change, the script will return an error after making the
    change; however, the change of tag should trigger a new CircleCI job
    with the new tag.

    Finally, the script will store the release id in the CircleCI workspace
    for easy retrieval by other cicada scripts.

    The following command-line options are supported:

    -h|--help
        Print a help message and quit.

    --version
        Print the name and version of the script and quit.

ENVIRONMENT
    CIRCLE_TAG
        The git tag that triggered the current build. Set by CircleCI if the
        current build was triggered by tag rather than a branch commit. If
        set, it must be a semantic version string.

    CIRCLE_PROJECT_USERNAME
    CIRCLE_PROJECT_REPONAME
        The username and reponame of the target project. Set by CircleCI.

    GH_TOKEN
        A GitHub Personal Access Token that allows read access to the target
        repo.
"

SCRIPTDIR=`cd \`dirname $0\`; pwd`
. ${SCRIPTDIR}/citools-basics.rc || exit 1

# Verify all needed environment variables are set
circle-env || exit 1

if [ ":${CIRCLE_TAG}" = ":" ] ; then
    exit 0
fi
if [ ":${SEMVER}" = ":" ] then
    echo "${PROG}: \$CIRCLE_TAG is not a valid semantic version string" >&2
    exit 1
fi
if [ ":${GH_TOKEN}" = ":" ] ; then
    echo "${PROG}: GH_TOKEN must be set" >&2
    exit 1
fi

SEMVER_NUM=`parse-semver -n ${SEMVER}`
SEMVER_META=`parse-semver -m ${SEMVER}`

# Verify release object exists, and get its id
REPO="${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"
RELEASE_RESP=`github-get "/repos/${REPO}/releases/tags/${CIRCLE_TAG}"`
if [ $? != 0 ] ; then
    echo ${RELEASE_RESP} >&2
    exit 1
fi
release_id=`echo "${RELEASE_RESP}" | jq -r '.id'`

# If there is no existing image for this tag, the deployment environment
# should be the default environment; otherwise we need to retag
image_tag=`cicada-image-tag --get` || exit 1
if [ ":${image_tag}" = ":" ] ; then
    DESIRED_TAG="${SEMVER_NUM}-${DEFAULT_ENVIRONMENT}${SEMVER_META}"
else
    DESIRED_TAG="${SEMVER}"
fi

SEMVER_PRERELEASE=`parse-semver -p ${DESIRED_TAG}`

#
# Now verify release object is correct. Fix it if it is not
#
if [ "${SEMVER_PRERELEASE}" = ":" ] ; then
    IS_PRERELEASE=false
else
    IS_PRERELEASE=true
fi

old_data=`echo "${RELEASE_RESP}" |
   jq '{tag_name,target_commitish,name,body,draft,prerelease}'`
old_tag_name=`echo "${RELEASE_RESP}" | \
              sed -n -e 's/.*"tag_name": "\(.*\)".*/\1/p'`

#
# Patch release if necessary
#
new_data=`echo "$old_data" |
  sed -e 's/"tag_name": ".*",/"tag_name": "'${DESIRED_TAG}'",/' \
    -e 's/"name": ".*",/"name": "'${SEMVER_NUM}'",/' \
    -e 's/"target_commitish": ".*",/"target_commitish": "'${CIRCLE_SHA1}'",/' \
    -e 's/"prerelease": .*/"prerelease": '${IS_PRERELEASE}'/'`

if [ "${old_data}" != "${new_data}" ] ; then
    cat "${new_data}" |
        github-patch "/repos/${REPO}/releases/${release_id}" >/dev/null ||
            exit 1
    if [ ":${old_tag_name}" != ":${DESIRED_TAG}" ] ; then
        echo "WARNING: the release tag has been changed to ${DESIRED_TAG}" >&2
        echo "A new build should be triggered automatically" >&2

        git push --delete origin "${old_tag_name}"

        exit 1
    fi
fi

echo ${release_id} >${STATEDIR}/release_id

exit 0


