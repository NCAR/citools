#!/bin/sh
PROG="cicada-log"
DESC="Read/write from/to a CICADA log"
USAGE1="${PROG} --write --branch=<project>-<deploy_env> --image=image_tag
                  --type=approved|deployed [<details>]"
USAGE2="${PROG} --read --branch=<project>-<deploy_env> [--image=image_tag]
                  [--type=approved|deployed]"
USAGE3="${PROG} -h|--help"
USAGE4="${PROG} --version"
USAGE="Usage:
  $USAGE1
  $USAGE2
  $USAGE3
  $USAGE4
"
SCRIPT_VERSION=0.0.1

HELP_TEXT="
NAME
    $PROG - $DESC

SYNOPSIS
    $USAGE1
    $USAGE2
    $USAGE3
    $USAGE4

DESCRIPTION
    This script is used to interact with the logs in the CICADA GitHub repo.
"
SCRIPTDIR=`cd \`dirname $0\`; pwd`
. ${SCRIPTDIR}/citools-basics.rc || exit 1

# Verify all needed environment variables are set
circle-env || exit 1

CICADA_REPO=gwilliam-ucar-edu/CICADA
APPROVED_CLAUSE="approved for deployment to"
DEPLOYED_CLAUSE="deployed to"

# Process command line args
READ=n
WRITE=n
TYPE_CLAUSE=
PROJECT=
DEPLOY_ENV=
IMAGE_TAG=
LOGDETAIL=
while [ $# != 0 ] ; do
    arg="$1"
    shift
    case ${arg} in
        --write)
            WRITE=y ;;
        --read)
            READ=y ;;
        --type=approved)
            TYPE_CLAUSE="${APPROVED_CLAUSE}" ;;
        --type=deployed)
            TYPE_CLAUSE="${DEPLOYED_CLAUSE}" ;;
        --branch=*)
            PROJECT=`expr "${arg}" : '--branch=\(.*\)-[^-][^-]*$'`
            DEPLOY_ENV=`expr "${arg}" : '--branch=.*-\([^-][^-]*\)$'` ;;
        --image=*)
            IMAGE_TAG=`expr "${arg}" : '--image=\(.*\)'` ;;
        --type=*)
            echo "${PROG}: unknown --type argument: $arg" >&2
            exit 1 ;;
        -*)
            echo "${PROG}: unknown option: $arg" >&2
            exit 1 ;;
        *)
            LOGDETAIL="${LOGDETAIL} ${arg}" ;;
    esac
done

usage_err=n
if [ ":${PROJECT}" = ":" ] ; then
    echo "${PROG}: --branch argument is required" >&2
    usage_err=y
fi
if [ "${READ}${WRITE}" = "nn" ] ; then
    echo "${PROG}: one of --write or --read is required" >&2
    usage_err=y
elif [ "${READ}${WRITE}" = "yy" ] ; then
    echo "${PROG}: --write and --read are mutually exclusive" >&2
    usage_err=y
fi
if [ "${WRITE}${TYPE_CLAUSE}" = "y" ] ; then
    echo "${PROG}: --type is required with --write" >&2
    usage_err=y
fi
if [ "${WRITE}${IMAGE_TAG}" = "y" ] ; then
    echo "${PROG}: --image is required with --write" >&2
    usage_err=y
fi
if [ $usage_err = y ] ; then
    echo $USAGE >&2
    exit 1
fi

LOCAL_REPO="${STATEDIR}/CICADA"
if [ ! -d "${LOCAL_REPO}" ] ; then
    # Clone (shallow) the CICADA repo so that the logs are available
    git clone --depth 1 git@github.com:${CICADA_REPO}.git ${LOCAL_REPO}
    if [ $? != 0 ] ; then
        echo "${PROG}: unable to clone ${CICADA_REPO}" >&2
        exit 1
    fi
    cd ${LOCAL_REPO} || exit 1
else
    cd ${LOCAL_REPO} || exit 1
    git fetch || exit 1
fi

LOGFILE="logs/${PROJECT}/${DEPLOY_ENV}.log"
if [ ${WRITE} = y ] ; then
    LOGDIR=`dirname "${LOGFILE}"`
    mkdir -p "${LOGDIR}" || exit 1

    #
    # Make entry in log file and push
    #
    LOGMSG="${PROJECT}:${IMAGE_TAG} ${TYPE_CLAUSE} ${DEPLOY_ENV}"
    tstamp=`date "+%Y-%m-%dT%H:%M:%S%z"`

    echo "${tstamp} ${LOGMSG}${LOGDETAIL}" >>${LOGFILE}

    git add "${LOGFILE}" || exit 1
    for try in 1 2 3 ; do
        git commit -m "${LOGMSG}" && git push
        if [ $? = 0 ] ; then
            exit 0
        else
            sleep 2
            git pull
        fi
    done
    exit 1
elif [ ${READ} = y ] ; then
    if [ ! -f "${LOGFILE}" ] ; then
        exit 0
    fi
    pattern=
    if [ ":${IMAGE_TAG}" != ":" ] ; then
        pattern=":${IMAGE_TAG} "
    fi
    if [ ":${TYPE_CLAUSE}" != ":" ] ; then
        pattern="${PATTERN}${TYPE_CLAUSE} "
    fi
    if [ ":${pattern}" = ":" ] ; then
        cat "${LOGFILE}"
    else
        fgrep "${pattern}" "${LOGFILE}"
    fi
fi

exit 0

