#!/bin/sh
PROG=circle-env
DESC="Define circle-related env variables or verify they are set"
USAGE1="${PROG} [--write]"
USAGE2="${PROG} -h|--help"
USAGE3="${PROG} --version"
SCRIPT_VERSION=0.0.1

DEFAULT_DEPLOYMENT_FRAMEWORK=cicada
DEFAULT_PRERELEASE_ENVIRONMENTS="test staging"
DEFAULT_PRODUCTION_ENVIRONMENT="production"

HELP_TEXT="
NAME
    $PROG - $DESC

SYNOPSIS
    $USAGE1
    $USAGE2
    $USAGE3

DESCRIPTION
    This script either writes environment variable definitions to a given file
    for various CircleCI/citools variables, or verifies that the same variables
    are defined in the environment.

    If the \"--write\" argument is given on the command line, the script will
    write a file containing variable definitions. The name of the output file
    will be written to standard output (see WORKSPACE and INIT_RC descriptions
    below). The output file can subsequently be sourced (from a Bourne-ish
    shell) to actually set the environment variables.

    Without the \"--write\" argument, the script verifies that the variables
    are defined and returns 1 if any are not. It is meant to be run from
    circle-* scripts.

    The following environment variables are defined/checked:

    WORKSPACE
        The absolute path of the CircleCI workspace root directory for the
        current workflow. This environment variable can be pre-set; any
        existing value will be used by the script; otherwise the parent of
        the script's own directory is used.

    INIT_RC
        The name of the file written when \"--write\" is given. This file
        should be sourced at the start of CircleCI \"run\" job steps to set
        environment variables. The INIT_RC variable can be used by job steps
        that need to modify the environment for subsequent job steps. This
        environment variable can be pre-set; any existing value will be used
        by the script; otherwise \"\${WORKSPACE}/state/init.rc\" is used.

    STATEDIR
        A workspace subdirectory in which state information can be stored
        for sharing among jobs. Defined to be \${WORKSPACE}/state.

    LOCAL_BIN
        The directory where additional software should be defined for use by
        CircleCI jobs. This should be under \${WORKSPACE} so that software
        can be installed once and shared among multiple jobs in a workflow.
        Defined to be the script's own directory.
    
    DEPLOYMENT_FRAMEWORK
        The name of the \"deployment framework\" for the current project.
        Default is \"${DEFAULT_DEPLOYMENT_FRAMEWORK}\".

    PRERELEASE_ENVIRONMENTS
        An ordered list of supported prerelease deployment environments. The
        default is \"${DEFAULT_PRERELEASE_ENVIRONMENTS}\". The \"prerelease\"
        component of all semanic version tags should match one of these values
        if present. The first name in the list is the default deployment
        environment when an image is first pushed. The second is the next
        environment in the pipeline when the image is promoted, etc.

    PRODUCTION_ENVIRONMENT
        The name of the non-prerelease deployment environment. Default is
        \"${DEFAULT_PRODUCTION_ENVIRONMENT}\".

    DEFAULT_ENVIRONMENT
        The default deployment environment for new images. Defined as the first
        name in the PRERELEASE_ENVIRONMENTS list.

    SEMVER
        Iff the CIRCLE_TAG environment variable is set and is a valid semantic
        version string, a copy of \$CIRCLE_TAG. \$CIRCLE_TAG will be treated as
        a valid semantic version string even if it starts with a \"v\" or
        \"V\"; in this case, SEMVER will not include this initial letter.
"
SCRIPTDIR=`cd \`dirname $0\`; pwd`
. ${SCRIPTDIR}/citools-basics.rc || exit 1

if [ ":$1" = ":--write" ] ; then
    MODE=write
else
    MODE=check
fi

VARS="
 WORKSPACE
 INIT_RC
 STATEDIR
 LOCAL_BIN
 DEPLOYMENT_FRAMEWORK
 PRERELEASE_ENVIRONMENTS
 PRODUCTION_ENVIRONMENT
 DEFAULT_ENVIRONMENT
"
if [ ":${CIRCLE_TAG}" != ":" ] ; then
    VARS="$VARS SEMVER"
fi
if [ $MODE = check ] ; then
    init_err=n
    for var in ${VARS} ; do
        eval val=\"\$$var\"
        if [ ":$val" = ":" ] ; then
            echo "${PROG}: variable $var is not set" >&2
            init_err=y
        fi
    done
    if [ $init_err = y ] ; then
        exit 1
    fi
    exit 0
fi
scriptparent=`dirname ${SCRIPTDIR}`
WORKSPACE="${WORKSPACE:-${scriptparent}}"
WORKSPACE=`cd ${WORKSPACE} ; pwd`
INIT_RC="${INIT_RC:-${WORKSPACE}/state/init.rc}"

STATEDIR="${WORKSPACE}/state"
if [ ! -d "${STATEDIR}" ] ; then
    mkdir -p "${STATEDIR}" || exit 1
fi

LOCAL_BIN="${SCRIPTDIR}"

DEPLOYMENT_FRAMEWORK="${DEPLOYMENT_FRAMEWORK:-${DEFAULT_DEPLOYMENT_FRAMEWORK}}"
PRERELEASE_ENVIRONMENTS="${PRERELEASE_ENVIRONMENTS:-${DEFAULT_PRERELEASE_ENVIRONMENTS}}"
PRODUCTION_ENVIRONMENT="${PRODUCTION_ENVIRONMENT:-${DEFAULT_PRODUCTION_ENVIRONMENT}}"
set : ${PRERELEASE_ENVIRONMENTS}
DEFAULT_ENVIRONMENT="$2"
export PRERELEASE_ENVIRONMENTS PRODUCTION_ENVIRONMENT DEFAULT_ENVIRONMENT

if [ ":${CIRCLE_TAG}" != ":" ] ; then
    SEMVER=`${SCRIPTDIR}/parse-semver -npm "${CIRCLE_TAG}" 2>/dev/null`
fi

for var in ${VARS} ; do
    eval val=\"\$${var}\"
    echo "$var=\"${val}\" export $var"
done >"${INIT_RC}"

echo "${INIT_RC}"