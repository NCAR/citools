#!/bin/sh
PROG=citools-docgen
DESC="Generate documentation from --help output"
USAGE1="${PROG} [--bindir=dir] docdir"

REPO_DEFAULT="NCAR/citools"

HELP_DESC="
This script creates documentation pages in the GitHub citools wiki. It
creates man-like text documents by invoking each script with its --help
option, and a markdown index file with links to the text documents.

Other repos that use the same scripting conventions as citools can use
this script as well.

Repos that use CircleCI to automate builds can add the following code to their
config.yml configuration file:

      - run:
          name: \"Generate documentation\"
          command: |
              set +e
              git config --global user.email \"\${GH_USER_EMAIL}\"
              git config --global user.name \"\${GH_USER_NAME}\"
              git clone --depth 1 https://\${GH_TOKEN}@github.com/NCAR/citools.git /tmp/citools
              REPO=\$CIRCLE_PROJECT_USERNAME/\$CIRCLE_PROJECT_REPONAME
              export REPO
              git clone https://\${GH_TOKEN}@github.com/\$REPO.wiki.git /tmp/wiki
              /tmp/citools/citools-docgen --bindir=\`pwd\` /tmp/wiki
              cd /tmp/wiki
              git add .
              if git commit -m 'Latest doc build' ; then
                  git push
              fi

The GH_TOKEN, GH_USER_EMAIL, and GH_USER_NAME environment variables are
typically defined the CircleCI context for the build.

"
HELP_OPTS="
--bindir=dir
    If given, the top-level directory containing the scripts to document.
    If not given, the top-level directory in the repo is used if a list of
    scripts is not provided via the DOCGEN_PROGS environment variable. If a
    relative path is provided, it is assumed to relative to the top-level
    directory in the repo.
"
HELP_ARGS="
docdir
    The output directory.
"
HELP_ENV="
DOCGEN_PROGS
    If set, a whitespace-separated list of programs with a --help option
    that should be used to generate documentation. If not set, scripts
    under the --bindir directory containing a line starting with \"PROG=\"
    or \"\$PROG =\" are used.

REPO
    The owner/repo name of the target script repository. Default is
    \"${REPO_DEFAULT}\".
"
HELP_FILES="
index.md
    The index file name.

<scriptname>.txt
    The help file for a script.
"

SCRIPTDIR=`cd \`dirname $0\`; pwd`
. ${SCRIPTDIR}/citools-basics.rc || exit 1

REPO=${REPO:=${REPO_DEFAULT}} export REPO
REPONAME=`expr "${REPO}" : '[^/]*/\(.*\)$'`
WIKI_URL="https://github.com/${REPO}/wiki"

REPO_ROOT=`git rev-parse --show-toplevel` || exit 1
BINDIR="${REPO_ROOT}"
case $1 in
    --bindir=/*)
        BINDIR=`expr "$1" : '--scriptdir=\(.*\)'`
        shift ;;
    --bindir=*)
        RELDIR=`expr "$1" : '--scriptdir=\(.*\)'`
        BINDIR="${REPO_ROOT}/${RELDIR}"
        shift ;;
esac

DOCDIR="$1"
if [ ":$DOCDIR" = ":" ] ; then
    echo "${PROG}: directory argument required" >&2
    exit 1
fi
if [ ! -d "${DOCDIR}" ] ; then
    echo "${PROG}: $DOCDIR: not a directory" >&2
    exit 1
fi
DOCDIR=`cd "${DOCDIR}"; pwd`

TMPFILE="${DOCDIR}/.tmp"
INDEXFILE="${DOCDIR}/Home.md"

:>${INDEXFILE}.tmp

cd "${BINDIR}" || exit 1

trap "rm -rf ${TMPFILE} ${INDEXFILE}.tmp ; exit 1" 0 1 2 13 15

if [ ":$DOCGEN_PROGS" = ":" ] ; then
    DOCGEN_PROGS=`find . -type f ! -name '*~' -perm -0005 -exec egrep -l '^[$]?PROG *=' {} \;`
fi
for file in $DOCGEN_PROGS ; do
    relpath=`expr "${file}" : '\./\(.*\)$'`
    base=`basename "${relpath}"`
`
    echo '```text' >${TMPFILE}
    ${file} --help >>${TMPFILE}
    echo '```' >>${TMPFILE}
    if [ -s "${TMPFILE}" ] ; then
        DESC=`awk 'f{print;f=0} /^NAME/{f=1}' ${TMPFILE} | sed 's/^ *[^ ]* - \(.*\)/\1/'
        dir=`dirname "${DOCDIR}/${file}"`
        mkdir -p "${dir}"
        mv "${TMPFILE}" "${DOCDIR}/${file}.md"
        echo "- [${relpath}](${WIKI_URL}/${base}) - ${DESC}" >>${INDEXFILE}.tmp
    fi
done

cat >${INDEXFILE} <<EOF
Welcome to the ${REPONAME} wiki!

Many documents in the wiki are generated automatically when a change is
committed. These documents are simply snapshots of each script's `--help`
documentation.

EOF

sort ${INDEXFILE}.tmp >>${INDEXFILE}
rm -f ${INDEXFILE}.tmp

trap "" 0
exit 0



