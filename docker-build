#!/bin/sh
PROG=docker-build
DESC="Run \"docker build\" in two passes to embed metadata"
HELP_TEXT="
Usage: ${PROG} [OPTIONS] PATH | URL | -

Run \"docker build\" in two passes: the first pass caches the base image and
all layers defined by the Dockerfile. Information about the base image is
extracted from the built image, and if there is a .git directory, information
about the release is gathered. The second pass uses this information to
supplement the final image with the following labels:
  base.digest       - the base image digest
  base.tag          - the base image tag
  git.remote.origin - the url of the git remote origin (e.g. git remote repo)
  git.commit.sha1   - the sha1 of the latest commit
"
SCRIPTDIR=`cd \`dirname $0\`; pwd`
PATH="${SCRIPTDIR}:${PATH}" export PATH
. setup-scratchdir.rc

NEWARGS1="${SCRATCHDIR}/nargs1"
NEWARGS2="${SCRATCHDIR}/nargs2"
touch ${NEWARGS1}
touch ${NEWARGS2}
# Re-write command-line arguments for two invocations of "docker build".
# The first invocation has no -q|--quiet or -t|--tag arguments. The second
# has no --pull or --no-cache arguments or original --cache-from arguments; we
# will insert our own --cache-from and --label arguments to the second
# invocation. There is actually an initial invocation of "docker build" with
# only the "--help" option, to collect all legal command-line arguments so
# that the command line can be properly parsed.
(
  for arg in "$@" ; do
      echo "$arg"
  done
  echo "----END----"
  docker build --help ) | awk '
BEGIN {
    nArgs = 0
    nShortOpt = 0
    nLongOpt = 0
    state="start"
}
/^----END----/ {
    state="starthelp"
    next
}
(state == "start") {
    # Save original command-line arguments in args[]
    args[++nArgs] = $0      
    next
}
/^Options:/ {
    state="inargs"
    next
}
{
    # parse "docker build --help" to get latest set of legal args
    line=$0
    if (line ~ /^ *-[a-z],/) {
        ind = index(line,"-")
        shortOpt = substr(line,ind+1,1)
        shortOpts[++nShortOpt] = shortOpt
        line = substr(line,ind+3)
    }
    if (line ~ /^ *--[^ ]+/) {
        ind = index(line,"--")
        optArgJunk = substr(line,ind+2)
        ind2 = index(optArgJunk," ")
        longOpt = substr(optArgJunk,1,ind2-1)
        longOpts[++nLongOpt] = longOpt
        if (optArgJunk ~ /^[^ ]+ [^ ]/) {
            arg = 1
        } else {
            arg = 0
        }
        hasArg["--" longOpt] = arg
        if (shortOpt != "") {
            hasArg["-" shortOpt] = arg
        }
    }
    shortOpt = ""
    longOpt = ""
}
END {
    argc = 1
    help = "false"
    quiet = "false"
    newargc = 0
    # make note of -q|--quiet, normalize all other arguments and copy to
    # newargs[]
    while (argc <= nArgs) {
        arg = args[argc++]
        argsep = ""
        opthasarg = 0
        if (arg ~ /^-[^-]$/) {
            opt = arg
            if (hasArg[opt]) {
                opthasarg = 1
                optarg = args[argc++]
            }
        } else if (arg ~ /^-[^-]..*/) {
            opt = substr(arg,1,2)
            if (hasArg[opt]) {
                opthasarg = 1
                optarg = substr(arg,3)
            } else {
                args[--argc] = "-" substr(arg,3)
            }
        } else if (arg ~ /^--[^-=]+=.*/) {
            opt = arg
        } else if (arg ~ /^--/) {
            opt = arg
            if (hasArg[opt]) {
                opthasarg = 1
                optarg = args[argc++]
            }
        } else {
            argc--
            break
        }
        if (opt ~ /^(--help)|(--help=true)$/) {
            help = "true"
        } else if (opt ~ /^(-q)|(--quiet)|(--quiet=true)$/) {
            quiet = "true"
        } else {
            if (opthasarg) {
                newargs[++newargc] = opt "=" optarg
            } else {
                newargs[++newargc] = opt
            }
        }
    }
    while (argc <= nArgs) {
        newargs[++newargc] = args[argc++]
    }
    # Now build command-line arguments for the two "docker build" passes.
    # --quiet always goes first; in the first pass we will force it false when
    # we run, but its original value affects how we redirect the output
    if (help == "true") {
        printf("--help\n") >> nargs1
        exit 0
    }
    printf("--quiet=%s\n",quiet) >> nargs1
    printf("--quiet=%s\n",quiet) >> nargs2
    for (i=1; i<=newargc; i++) {
        arg = newargs[i]
        if (arg ~ /^(--pull)|(--pull=true)$/) {
            printf("%s\n",arg) >> nargs1
        } else if (arg ~ /^(--no-cache)|(--no-cache=true)$/) {
            printf("%s\n",arg) >> nargs1
        } else if (arg ~ /^--cache-from/) {
            printf("%s\n",arg) >> nargs1
        } else if (arg ~ /^(-t)|(--tag)/) {
            printf("%s\n",arg) >> nargs2
        } else {
            printf("%s\n",arg) >> nargs1
            printf("%s\n",arg) >> nargs2
        }
    }
}
' nargs1=${NEWARGS1} nargs2=${NEWARGS2} -

# Run our first invocation of "docker build", via "docker-cibuild".
METADATA=${SCRATCHDIR}/metadata
BUILD_OUTPUT=${SCRATCHDIR}/build.out
set :
while read arg ; do
    set "$@" "${arg}"
done <${NEWARGS1}
shift
if test ":$1" = ":--help" ; then
    echo "${HELP_TEXT}"
    docker build --help
    rm -rf "${SCRATCHDIR}"
    exit 0
fi
quiet="$1"
shift

if test ":$quiet" != ":--quiet=false" ; then
    docker-cibuild --metadata="${METADATA}" "$@" >/dev/null
else
    echo Build 1: docker build "$@"
    docker-cibuild --metadata="${METADATA}" "$@"
fi
rc=$?
if test $rc != 0 ; then
    exit $rc
fi

cat $METADATA
. ${METADATA} || exit 1

# Run our second invocation of "docker build", this time directly
if test ":$IMAGE_ID" != ":" ; then
    set : --cache-from=${IMAGE_ID}
fi
if test ":$BASE_TAG" != ":" ; then
    set "$@" --label "base.tag=${BASE_TAG}"
fi
if test ":$BASE_DIGEST" != ":" ; then
    set "$@" --label "base.digest=${BASE_DIGEST}"
fi
if test ":$REMOTE_ORIGIN" != ":" ; then
    set "$@" --label "git.remote.origin=${REMOTE_ORIGIN}"
fi
if test ":$REVISION_SHA1" != ":" ; then
    set "$@" --label "git.commit.sha1=${REVISION_SHA1}"
fi
while read arg ; do
    set "$@" "${arg}"
done <${NEWARGS2}
shift

if test ":$quiet" != ":--quiet=true" ; then
    echo Build 2: docker build "$@"
fi

docker build "$@"

