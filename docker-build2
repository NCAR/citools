#!/bin/sh
PROG=docker-cibuild
DESC="Run \"docker build\" in two passes to extract/embed metadata"
USAGE1="${PROG} <build_opts>"
HELP_DESC="
Run \"docker build\" in two passes: the output from the first pass is
captured and information about the base image is extracted from it. 
Additional information about the git release is also collected. In the
second pass, the collected metadata is added to the new image using labels.
Image caching is always enabled in the second pass to speed up the build
and to force the second image to match the first. A unique tag is generated
and assigned to the final image, and the collected metadata, the unique tag,
and the final image digest are written to a separate file called
\"image-meta.json\".

The following metadata attributes are added to the image using labels:
  git_remote_origin       Git remote origin url
  git_repo                Git username/reponame from the remote origin url
  git_revision_sha1       Git revision sha1 of most recent commit
  source_version          <major>.<minor>.<patch> for the source release
  image_registry          Docker image registry
  image_repo              Docker image repository
  image_name              Image name
  image_path              The registry/repo/name for the image; if the
                          registry is the default docker registry, it is
                          omitted. If a \":<tag>\" or \"@<digest>\" is
                          appended, the name should usable in a docker
                          \"pull\" command.
  image_qualifier         Image qualifier string
  base_tag                Full \"tagged\" name of the base image
  base_digest             Digest of the base image
  base_git_remote_origin  Github repo url for the base image, if the
                           base image was built by this script
  base_git_repo           Git username/reponame of the github repo for the
                           base image, if the base image was built by this
                           script.
The same attributes are written to the metadata file, along with the
following additional attributes:
  metadata_version        Metadata format version
  image_digest            Digest of the final image
  image_tag               Unique docker tag assigned to the final image
                           
The \"source_version\" and \"image_qualifier\" are derived from the most
recent semver git tag. If the current revision is tagged with a semantic
version, that tag is used, otherwise the most recent tag is used after
incrementing the patch number. The source_version is the major.minor.patch
semver component, and the image_qualifier is the metadata semver component
without its leading \"+\". See the \"get-git-version\" script.

The \"image_registry\", \"image_repo\", \"image_name\" and \"image_path\"
values are obtained using the \"docker-image-name\" script.

The unique tag assigned to the image is a semantic version string of the
form
  <source_version>-<timestamp>.<revision>.<image_qualifier>
where <source_version> and <image_qualifier> match the respective labels,
<timestamp> is a compact version of the UTC image creation timestamp, and
<revision> is the abbreviated git revision hash. If the <image_qualifier>
label is empty, the tag is of the form
  <source_version>-<timestamp>.<revision>
"
HELP_OPTS="
<build_opts>
    All options are passed verbatim to \"docker build\".
"
HELP_ENV="
IMAGE_METADATA_DIR
    If given, the name of a directory to which the image metadata file
    should be written. Default is \".\".
"
SCRIPTDIR=`cd \`dirname $0\`; pwd`
. ${SCRIPTDIR}/citools-basics.rc || exit 1

. setup-scratchdir.rc

METADATA_VERSION=1.0.0

IMAGE_METADATA_DIR="${IMAGE_METADATA_DIR:-.}"
if [ ! -d "${IMAGE_METADATA_DIR}" ] ; then
    echo "${PROG}: ${IMAGE_METADATA_DIR}: no such directory" >&2
    exit 1
fi
IMAGE_METADATA="${IMAGE_METADATA_DIR}/image-meta.json"
NO_CACHE=
PULL=
set : "$@" ====
shift
while [ ":$1" != ":====" ] ; do
    arg="$1"
    shift
    case ${arg} in
        --no-cache)
            NO_CACHE=${arg}
            continue ;;
        --pull)
            PULL=${arg}
            continue ;;
        *)
            set : "$@" "${arg}"
            shift ;;
    esac
done
shift

toplevel=`git rev-parse --show-toplevel 2>/dev/null`

if [ ":$toplevel" = ":" ] ; then
    echo "${PROG}: not a git repo" >&2
    exit 1
fi

RELEASE_TAG=`get-git-version --ignore-untracked` || exit 1

BUILD1_OUTPUT=${SCRATCHDIR}/docker-build.out1
BUILD2_OUTPUT=${SCRATCHDIR}/docker-build.out2
RETVAL=${SCRATCHDIR}/docker-build.retval
IMAGE1_INSPECTION=${SCRATCHDIR}/docker-build.image1
IMAGE2_INSPECTION=${SCRATCHDIR}/docker-build.image2
BASE_INSPECTION=${SCRATCHDIR}/docker-build.base

(eval docker build ${NO_CACHE} ${PULL} "$@" ; echo $? >${RETVAL}) |
    tee ${BUILD1_OUTPUT}
read retval <${RETVAL}
if [ ":${retval}" != ":0" ] ; then
    exit ${retval}
fi
wc=`wc -l <${BUILD1_OUTPUT}`
if [ $wc = 1 ] ; then
    echo "${PROG}: It appears -q|--quiet was used." >&2
    exit 1
fi
grep '^Step ' ${BUILD1_OUTPUT} >/dev/null
if [ $? != 0 ] ; then
    echo "${PROG}: unexpected output" >&2
    exit 1
fi

#
# We have acceptable output from a build
#

# Retrieve baseId and imageId from docker build output
eval `awk '
BEGIN { state = "looking" }
/^Step [0-9]+\/[0-9]+ : [fF][rR][oO][mM]/ {
    state = "sawfrom"
    next
}
/^ ---> [0-9a-f]*$/ {
    if (state == "sawfrom") {
        baseId = $2
    }
    state = "looking"
}
/^Successfully built / {
    id = $3
}
{
    next
}
END {
    if ((baseId != "") && (id != "")) {
        printf("baseId=%s imageId=%s\n",baseId,id);
    }
}' ${BUILD1_OUTPUT}`

docker inspect ${imageId} >${IMAGE1_INSPECTION}
imageDigest=`jq -r .[0].Id ${IMAGE1_INSPECTION}`
if [ ":${imageDigest}" = ":" ] ; then
    echo "${PROG}: unable to retrieve image data for $imageId" >&2
    exit 1
fi
docker inspect ${baseId} >${BASE_INSPECTION}
baseTag=`jq -r '.[0].RepoTags[0]' ${BASE_INSPECTION} | grep -v '^null$'`
baseDigest=`jq -r '.[0].RepoDigests[0]' ${BASE_INSPECTION} | grep -v '^null$'`
baseRemoteOrigin=`jq -r '.[0].Config.Labels.remote_origin' ${BASE_INSPECTION} | grep -v '^null$'`

# The following sets IMAGE_REGISTRY, IMAGE_REPO, IMAGE_NAME, and IMAGE_PATH
eval `docker-image-name --export`

gitRemoteOrigin=`git config --get remote.origin.url`
gitRevisionSha1=`git rev-list HEAD | head -1`
gitRepo=`expr "${gitRemoteOrigin}" : '.*[:/]\([^:/][^:/]*/[^:/][^:/]*\)\.git$'`
baseGitRepo=`expr "${baseRemoteOrigin}" : '.*[:/]\([^:/][^:/]*/[^:/][^:/]*\)\.git$'`

SOURCE_VERSION=`parse-semver -n "${RELEASE_TAG}"`
IMAGE_QUALIFIER=`parse-semver -m "${RELEASE_TAG}" | sed -e 's/^+//'`
IMAGE_TAG_QUALIFIER=`parse-semver -m "${RELEASE_TAG}" | sed -e 's/^+/./'`

#
# Invoke "docker build" again without --no-cache or --pull, and with metadata
# labels
set docker build \
  --label "base_digest=${baseDigest}" \
  --label "base_git_remote_origin=${baseRemoteOrigin}" \
  --label "base_git_repo=${baseGitRepo}" \
  --label "base_tag=${baseTag}" \
  --label "git_remote_origin=${gitRemoteOrigin}" \
  --label "git_repo=${gitRepo}" \
  --label "git_revision_sha1=${gitRevisionSha1}" \
  --label "image_name=${IMAGE_NAME}" \
  --label "image_path=${IMAGE_PATH}" \
  --label "image_qualifier=${IMAGE_QUALIFIER}" \
  --label "image_registry=${IMAGE_REGISTRY}" \
  --label "image_repo=${IMAGE_REPO}" \
  --label "source_version=${SOURCE_VERSION}" \
  "$@"

(eval "$@" ; echo $? >${RETVAL}) |
    tee ${BUILD2_OUTPUT}
read retval <${RETVAL}
if [ ":${retval}" != ":0" ] ; then
    exit ${retval}
fi
finalImageId=`sed -n 's/^Successfully built \(.*\)$/\1/p' ${BUILD2_OUTPUT}`
if [ ":${finalImageId}" = ":" ] ; then
    echo "${PROG}: unexpected output" >&2
    exit 1
fi
docker inspect ${finalImageId} >${IMAGE2_INSPECTION}
imageDigest=`jq -r .[0].Id ${IMAGE2_INSPECTION}`
imageCreated=`jq -r .[0].Created ${IMAGE2_INSPECTION}`
imageCtime=`echo ${imageCreated} | sed -e 's/[-:]//g' -e 's/\.[0-9]*Z$/Z/'`

gitRev=`expr "${gitRevisionSha1}" : '\(.......\).*'`
imageTag="${SOURCE_VERSION}-${imageCtime}.${gitRev}${IMAGE_TAG_QUALIFIER}"
imageTaggedName="${IMAGE_NAME}:${imageTag}"

docker tag "${finalImageId}" "${imageTaggedName}" || exit 1
cat >${IMAGE_METADATA} <<EOF
{
  "base_digest": "${baseDigest}",
  "base_git_remote_origin": "${baseRemoteOrigin}",
  "base_git_repo": "${baseGitRepo}",
  "base_tag": "${baseTag}",
  "git_remote_origin": "${gitRemoteOrigin}",
  "git_repo": "${gitRepo}",
  "git_revision_sha1": "${gitRevisionSha1}",
  "image_digest": "${imageDigest}",
  "image_name": "${IMAGE_NAME}",
  "image_path": "${IMAGE_PATH}",
  "image_qualifier": "${IMAGE_QUALIFIER}",
  "image_registry": "${IMAGE_REGISTRY}",
  "image_repo": "${IMAGE_REPO}",
  "image_tag": "${imageTag}",
  "metadata_version": "${METADATA_VERSION}",
  "source_version": "${SOURCE_VERSION}",
}
EOF

rm -rf "${SCRATCHDIR}"
trap "" 0
exit 0
