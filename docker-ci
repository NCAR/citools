#!/bin/sh
PROG=docker-ci
DESC="CI-friendly front-end script for docker commands"
USAGE1="${PROG} build <build_args>"
USAGE2="${PROG} find <revision>"
HELP_TEXT="
Usage: ${PROG} [OPTIONS] PATH | URL | -

Run \"docker build\" in two passes: the output from the first pass is
captured and information about the base image is extracted from it. 
Additional information about the git release is also collected. In the
second pass, the collected metadata is added to the new image using labels,
the image is assigned a unique tag. The following labels are added:
  git_remote_origin       Git remote origin url
  git_repo                Git username/reponame from the remote origin url
  git_revision_sha1       Git revision sha1 of most recent commit
  source_version          <major>.<minor>.<patch> for the source release
  image_registry          Docker image registry
  image_repo              Docker image repository
  image_name              Image name
  image_qualifier         Image qualifier string
  image_tag               Unique tag
  base_tag                Full \"tagged\" name of the base image
  base_digest             Digest of the base image
  base_git_remote_origin  Github repo url for the base image, if the
                           base image was built by this script
  base_git_repo           Git username/reponame of the github repo for the
                           base image, if the base image was built by this
                           script.

The \"source_version\" and \"image_qualifier\" are derived from the
\"release tag\" (see --release-tag description). If no value is given on the
command line, the RELEASE_TAG environment variable is used; if that is not
set, release tag is the output from the \"get-git-version\" script.

The \"image_registry\", \"image_epo\", and \"image_name\" are obtained
using the \"docker-image-name\" script.
"
HELP_OPTS="
--release-tag=<semver>
    The \"release tag\", which should be a semantic version string. The
    <major>.<minor>.<patch> component is taken as the \"source version\",
    and the metadata portion (with the leading \"+\" replaced by \-\")
    is the \"image qualifier\".
"
HELP_ENV="
RELEASE_TAG
    If given, the default \"release tag\".
"
SCRIPTDIR=`cd \`dirname $0\`; pwd`
. ${SCRIPTDIR}/citools-basics.rc || exit 1

. setup-scratchdir.rc

NO_CACHE=
PULL=
set : "$@" ====
shift
while [ ":$1" != ":====" ] ; do
    arg="$1"
    shift
    case ${arg} in
        --release-tag)
            RELEASE_TAG="$1"
            shift
            continue ;;
        --release-tag=*)
            RELEASE_TAG=`expr "${arg}" : '--release-tag=\(.*\)'`
            continue ;;
        --no-cache)
            NO_CACHE=${arg}
            continue ;;
        --pull)
            PULL=${arg}
            continue ;;
        *)
            set : "$@" "${arg}"
            shift ;;
    esac
done
shift

if [ ":${RELEASE_TAG}" = ":" ] ; then
    RELEASE_TAG=`get-git-version`|| exit 1
else
    parse-semver "${RELEASE_TAG}" 2>/dev/null
    if [ $? != 0 ] ; then
        echo "${PROG}: release tag \"${RELEASE_TAG}\" is not a semantic version string" >&2
        exit 1
    fi
fi

toplevel=`git rev-parse --show-toplevel 2>/dev/null`

if [ ":$toplevel" = ":" ] ; then
    echo "${PROG}: not a git repo" >&2
    exit 1
fi

BUILD1_OUTPUT=${SCRATCHDIR}/docker-build.out1
BUILD2_OUTPUT=${SCRATCHDIR}/docker-build.out2
RETVAL=${SCRATCHDIR}/docker-build.retval
IMAGE_INSPECTION=${SCRATCHDIR}/docker-build.image
BASE_INSPECTION=${SCRATCHDIR}/docker-build.base

(eval docker build ${NO_CACHE} ${PULL} "$@" ; echo $? >${RETVAL}) |
    tee ${BUILD1_OUTPUT}
read retval <${RETVAL}
if [ ":${retval}" != ":0" ] ; then
    exit ${retval}
fi
wc=`wc -l <${BUILD1_OUTPUT}`
if [ $wc = 1 ] ; then
    echo "${PROG}: It appears -q|--quiet was used." >&2
    exit 1
fi
grep '^Step ' ${BUILD1_OUTPUT} >/dev/null
if [ $? != 0 ] ; then
    echo "${PROG}: unexpected output" >&2
    exit 1
fi

#
# We have acceptable output from a build
#

# Retrieve baseId and imageId from docker build output
eval `awk '
BEGIN { state = "looking" }
/^Step [0-9]+\/[0-9]+ : [fF][rR][oO][mM]/ {
    state = "sawfrom"
    next
}
/^ ---> [0-9a-f]*$/ {
    if (state == "sawfrom") {
        baseId = $2
    }
    state = "looking"
}
/^Successfully built / {
    id = $3
}
{
    next
}
END {
    if ((baseId != "") && (id != "")) {
        printf("baseId=%s imageId=%s\n",baseId,id);
    }
}' ${BUILD1_OUTPUT}`

docker inspect ${imageId} >${IMAGE_INSPECTION}
imageDigest=`jq -r .[0].Id ${IMAGE_INSPECTION}`
if [ ":${imageDigest}" = ":" ] ; then
    echo "${PROG}: unable to retrieve image data for $imageId" >&2
    exit 1
fi
imageCreated=`jq -r .[0].Created ${IMAGE_INSPECTION}`
imageCtime=`echo ${imageCreated} | sed -e 's/[-:]//g' -e 's/\.[0-9]*Z$/Z/'`
docker inspect ${baseId} >${BASE_INSPECTION}
baseTag=`jq -r '.[0].RepoTags[0]' ${BASE_INSPECTION} | grep -v '^null$'`
baseDigest=`jq -r '.[0].RepoDigests[0]' ${BASE_INSPECTION} | grep -v '^null$'`
baseRemoteOrigin=`jq -r '.[0].Config.Labels.remote_origin' ${BASE_INSPECTION} | grep -v '^null$'`

# The following sets IMAGE_NAME
eval `docker-image-name --export`

gitRemoteOrigin=`git config --get remote.origin.url`
gitRevisionSha1=`git rev-list HEAD | head -1`
gitRepo=`expr "${gitRemoteOrigin}" : '.*[:/]\([^:/][^:/]*/[^:/][^:/]*\)\.git$'`
baseGitRepo=`expr "${baseRemoteOrigin}" : '.*[:/]\([^:/][^:/]*/[^:/][^:/]*\)\.git$'`

SOURCE_VERSION=`parse-semver -n "${RELEASE_TAG}"`
IMAGE_QUALIFIER=`parse-semver -m "${RELEASE_TAG}" | sed -e 's/^\+/-/'`

imageTag="${SOURCE_VERSION}-${imageCtime}${IMAGE_QUALIFIER}"
imageTaggedName="${IMAGE_NAME}:${imageTag}"

#
# Invoke "docker build" again without --no-cache or --pull, and with metadata
# labels
set docker build \
  --label "git_remote_origin=${gitRemoteOrigin}" \
  --label "git_repo=${gitRepo}" \
  --label "git_revision_sha1=${gitRevisionSha1}" \
  --label "source_version=${SOURCE_VERSION}" \
  --label "image_registry=${IMAGE_REGISTRY}" \
  --label "image_repo=${IMAGE_REPO}" \
  --label "image_name=${IMAGE_NAME}" \
  --label "image_qualifier=${IMAGE_QUALIFIER}" \
  --label "image_tag=${imageTag}" \
  --label "base_tag=${baseTag}" \
  --label "base_digest=${baseDigest}" \
  --label "base_git_remote_origin=${baseRemoteOrigin}" \
  --label "base_git_repo=${baseGitRepo}" \
  "$@"

(eval "$@" ; echo $? >${RETVAL}) |
    tee ${BUILD2_OUTPUT}
read retval <${RETVAL}
if [ ":${retval}" != ":0" ] ; then
    exit ${retval}
fi
finalImageId=`sed -n 's/^Successfully built \(.*\)$/\1/p' ${BUILD2_OUTPUT}`
if [ ":${finalImageId}" = ":" ] ; then
    echo "${PROG}: unexpected output" >&2
    exit 1
fi

#  --label "image_created=${imageCreated}"
#  --label "image_digest=${imageDigest}"
#  --label "image_id=${imageId}"

echo docker tag "${finalImageId}" "${imageTaggedName}"
docker tag "${finalImageId}" "${imageTaggedName}"

rm -rf "${SCRATCHDIR}"
trap "" 0
exit 0
