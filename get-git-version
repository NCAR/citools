#!/bin/sh
PROG=get-git-version
DESC="If in a git repo, show its best semantic version number"
USAGE1="${PROG} [-v|--verbose] [--ignore-untracked]"

HELP_DESC="
If run in a git repository, this tries to determine the semantic version
number for the current state.

If the repo is up-to-date and there is a semantic version tag associated
with the current release, that version tag is selected. Otherwise, a
version tag will be contructed using a \"base\" version number and a
\"prerelease\" component consisting of a UTC timestamp string of the
form \"<YYYYmmdd>T<HHMMSS>Z\", a \".\, and a suffix.
the

If the repo is up-to-date, and there is a semantic version tag associated
with an earlier release, the base version is generated by incrementing the
\"patch\" portion of the latest tag, and the suffix is the first 7
characters of the release SHA1.

If the repo contains any uncommitted/untracked files, or if no existing
semantic version can be found, the base version is \"0.0.1\", and the
suffix is \"dev\".

The script will write the version tag to standard output. 
"
HELP_OPTS="
-v|--verbose
    Write information messages to stderr.

--ignore-untracked
    Untracked files are ignored when determining whether the repo is
    up-to-date.
"
SCRIPTDIR=`cd \`dirname $0\`; pwd`
. ${SCRIPTDIR}/citools-basics.rc || exit 1

UNO=
while test $# != 0 ; do
    case $1 in
        -v|--verbose)
            CITOOLS_VERBOSE=true export CITOOLS_VERBOSE ;;
        --ignore-untracked)
            UNO=-uno ;;
    esac
    shift
done

if test ! -x ${SCRIPTDIR}/versions ; then
    echo "$PROG: cannot find versions script" >&2
    exit 1
fi
REPO_ROOT=`git rev-parse --show-toplevel` || exit 1
cd ${REPO_ROOT} || exit 1

COMMIT=`git rev-list HEAD 2>/dev/null | head -1`

vecho "Commit SHA1: $COMMIT"

uncomm=`git status ${UNO} -s`

version="0.0.1"
if test ":$uncomm" != ":" ; then
    vecho "There are uncommitted changes to this repo - using dev version:"
    vecho "$uncomm"
    suffix="dev"
else
    currver=`git tag --list --points-at "${COMMIT}" | ${SCRIPTDIR}/versions -c`
    if test ":${currver}" != ":" ; then
        vecho "Current commit has a semantic version tag: ${currver}"
        echo "${currver}"
        exit 0
    fi
    suffix=`expr "${COMMIT}" : '\(.......\).*'`

    vecho "Current commit does not have a semantic version tag"
    basever=`git tag --list --no-contains "${COMMIT}" | ${SCRIPTDIR}/versions -c`
    if test ":${basever}" = ":" ; then
        vecho "No base version tag found - using ${version}"
    else
        vecho "Found base version tag; incrementing ${basever}"
        version=`echo ${basever} | versions -i`
    fi
fi
tstamp=`date -u +%Y%m%dT%H%M%SZ`
echo "${version}-${tstamp}.${suffix}"
exit 0

