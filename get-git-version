#!/bin/sh
PROG=get-git-version
DESC="If in a git repo, show its best semantic version number"
USAGE1="${PROG} [-v|--verbose] [--ignore-untracked]"

HELP_DESC="
If run in a git repository, this tries to determine the semantic version
number for the current state.

If the repo contains any uncommitted/untracked files, or if the current
revision is not associated with a semantic version tag, then the script
will attempt to create a \"development\" version by incrementing the
\"patch\" number of the latest relevant semantic version tag that can be
found, and adding a \"prerelease\" string of the form \"<tstamp>.dev\",
where <tstamp> is a UTC timestamp of the form \"<YYYYmmdd>T<HHMMSS>Z\".

If there are no uncommitted/untracked files and the current revision is
associated with one of more semantic version tags, then the latest
semantic version tag is used.

If no relevant semantic version tag can be gleaned from the repo,
\"0.0.1-<tstamp>.dev\" is used.

The script will write the version tag to standard output. 
"
HELP_OPTS="
-v|--verbose
    Write information messages to stderr.

--ignore-untracked
    Untracked files are ignored when determining whether the repo is
    up-to-date.
"
SCRIPTDIR=`cd \`dirname $0\`; pwd`
. ${SCRIPTDIR}/citools-basics.rc || exit 1

UNO=
while test $# != 0 ; do
    case $1 in
        -v|--verbose)
            CITOOLS_VERBOSE=true export CITOOLS_VERBOSE ;;
        --ignore-untracked)
            UNO=-uno ;;
    esac
    shift
done

if test ! -x ${SCRIPTDIR}/versions ; then
    echo "$PROG: cannot find versions script" >&2
    exit 1
fi
REPO_ROOT=`git rev-parse --show-toplevel` || exit 1
cd ${REPO_ROOT} || exit 1

COMMIT=`git rev-list HEAD 2>/dev/null | head -1`

vecho "Commit SHA1: $COMMIT"

uncomm=`git status ${UNO} -s`

if test ":$uncomm" != ":" ; then
    vecho "There are uncommitted changes to this repo - using dev version:"
    vecho "$uncomm"
else
    version=`git tag --list --points-at "${COMMIT}" | ${SCRIPTDIR}/versions -c`
    if test ":$version" != ":" ; then
        vecho "Current commit has a semantic version tag"
        echo "version=$version"
        exit 0
    else
        vecho "Current commit does not have a semantic version tag"
    fi
fi

version=`git tag --list --points-at "${COMMIT}" | ${SCRIPTDIR}/versions -i`
if test ":$version" = ":" ; then
    version=`git tag --list --no-contains "${COMMIT}" | ${SCRIPTDIR}/versions -i`
    if test ":$version" = ":" ; then
        version="0.0.1"
        exit 0
    else
        vecho "Found/incremented semantic version tag: $version"
    fi
fi
tstamp=`date -u +%Y%m%dT%H%M%SZ`
echo "${version}-${tstamp}.dev"

