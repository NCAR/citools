#!/bin/sh
PROG=get-git-version
DESC="If in a git repo, show the best semantic version number for the repo"
VERSION=0.0.1
USAGE1="${PROG} [-v|--verbose] [--ignore-untracked]"
USAGE2="${PROG} -h|--help"
USAGE3="${PROG} --version"
if test ":$1" = ":--help" ; then
    cat <<EOF
NAME
    $PROG - $DESC

SYNOPSIS
    $USAGE1
    $USAGE2
    $USAGE3

DESCRIPTION
    If run in a git repository, this tries to determine the semantic version
    number for the current state.

    If the repo contains any uncommitted/untracked files, or if the current
    revision is not associated with a semantic version tag, then the script
    will attempt to create a "development" version by incrementing the "patch"
    number of the latest relevant semantic version tag that can be found, and
    appending a string of the form "<tstamp>-dev", where <tstamp> is a UTC
    timestamp of the form "<YYYYmmdd>.<HHMMSS>Z".

    If there are no uncommitted/untracked files and the current revision is
    associated with one of more semantic version tags, then the latest
    semantic version tag is used.

    If no relevant semantic version tag can be gleaned from the repo,
    "0.0.1-<tstamp>-dev" is used.

    The script will write the version tag to standard output. 

    The following arguments are supported:

    -v|--verbose
        Write information messages to stderr.

    --ignore-untracked
        Untracked files are ignored when determining whether the repo is
        up-to-date. Note that if the git repo contains an untracked ".ci"
        directory, it will be ignored even if this argument is not provided.

    -h|--help
        Write this help text and exit

    --version
        Write the script version number and exit

EOF
    exit 0
fi
a="/$0"; a=${a%/*}; a=${a#/}; a=${a:-.}; SCRIPTDIR=$(cd "$a"; pwd)
VECHO=:
UNO=
while test $# != 0 ; do
    case $1 in
        -h|--help)
            $SCRIPTDIR/$PROG --help
            exit 0 ;;
        --version)
            echo ${PROG} - $VERSION
            exit 0 ;;
        -v|--verbose)
            VECHO=echo ;;
        --ignore-untracked)
            UNO=-uno ;;
    esac
    shift
done

if test ! -x ${SCRIPTDIR}/versions ; then
    echo "$PROG: cannot find versions script" >&2
    exit 1
fi
REPO_ROOT=`git rev-parse --show-toplevel` || exit 1
cd ${REPO_ROOT} || exit 1

COMMIT=`git rev-list HEAD 2>/dev/null | head -1`

$VECHO "Commit SHA1: $COMMIT" >&2

uncomm=`git status ${UNO} -s | grep -v '\?\? .ci'`

if test "$uncomm" != ":" ; then
    $VECHO "There are uncommitted changes to this repo - using dev version:" >&2
    $VECHO "$uncomm" >&2
else
    version=`git tag --list --points-at "${COMMIT}" | ${SCRIPTDIR}/versions -c`
    if test ":$version" = ":" ; then
        $VECHO "Current commit has a semantic version tag" >&2
        echo "version=$version"
        exit 0
    else
        $VECHO "Current commit does not have a semantic version tag" >&2
    fi
fi

version=`git tag --list --points-at "${COMMIT}" | ${SCRIPTDIR}/versions -i`
if test ":$version" = ":" ; then
    version=`git tag --list --no-contains "${COMMIT}" | ${SCRIPTDIR}/versions -i`
    if test ":$version" = ":" ; then
        version="0.0.1"
        exit 0
    else
        $VECHO "Found/incremented semantic version tag: $version" >&2
    fi
fi
tstamp=`date -u +%Y%m%d.%H%M%SZ`
echo "${version}-${tstamp}-dev"


