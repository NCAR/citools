#!/bin/sh
PROG=get-github-release-id
DESC="Retrieve the id of a named GitHub repo \"release\""
SCRIPT_VERSION=0.0.1
USAGE1="${PROG} [--owner=<github_user>] [--repo=<repo>]
                                [--tag=<release_tag>]"
USAGE2="${PROG} -h|--help"
USAGE3="${PROG} --version"
USAGE="Usage:
    ${USAGE1}
    ${USAGE2}
    ${USAGE3}"

# This script uses primitive but portable dialects of sh and awk
PATH="/usr/local/bin:/usr/local/sbin:/bin:/sbin:/usr/bin:/usr/sbin"
export PATH

REPO_OWNER="${REPO_OWNER:-${CIRCLE_PROJECT_USERNAME}}"
REPO_NAME="${REPO_NAME:-${CIRCLE_PROJECT_REPONAME}}"
RELEASE_TAG="${RELEASE_TAG:-${CIRCLE_TAG}}"

while [ $# != 0 ] ; do
    case $1 in
      -h|--help)
          cat <<EOF
NAME
    $PROG - $DESC

SYNOPSIS
    $USAGE1
    $USAGE2
    $USAGE3

DESCRIPTION
    Retrieve the id of the indicated GitHub repo "release".

    If the release is found, the id is printed to standard output and 0 is
    returned. If the indicated repo exists but the release cannot be found,
    nothing is printed, but 0 is still returned. If any other error occurs,
    the script will return non-zero.

    The following command-line options are supported:

    --owner=<github_user>
        The owner of the github repository. If not given, the REPO_OWNER and
        CIRCLE_PROJECT_USERNAME environment variables are both checked for a
        value; if no value can be found, the script will abort.

    --repo=<github_repo>
        The name of the github repository. If not given, the REPO_NAME and
        CIRCLE_PROJECT_REPONAME environment variables are both checked for a
        value; if no value can be found, the script will abort.

    --tag=<release_tag>
        The tag name of the github "release". If not given, the RELEASE_TAG and
        CIRCLE_TAG environment variables are both checked for a value; if no
        value can be found, the script will abort.

    -h|--help
        Print a help message and quit.

    --version
        Print the name and version of the script and quit.

ENVIRONMENT
    REPO_OWNER
    REPO_NAME
    RELEASE_TAG
        Primary defaults for the --owner, --repo, and --tag, respectively.

    CIRCLE_PROJECT_USERNAME
    CIRCLE_PROJECT_REPONAME
    CIRCLE_TAG
        Secondary defaults for the --owner, --repo, and --tag, respectively.

EOF
          exit 0 ;;
      --version)
          echo "$PROG - v$SCRIPT_VERSION"
          exit 0 ;;
      --owner=*)
          REPO_OWNER=`expr "$1" : "--owner=\(.*\)"` ;;
      --repo=*)
          REPO_NAME=`expr "$1" : "--repo=\(.*\)"` ;;
      --tag=*)
          RELEASE_TAG=`expr "$1" : "--tag=\(.*\)"` ;;
      -*)
          echo "${PROG}: unknown option: $1" >&2
          exit 1 ;;
      *)
          ASSETFILE="$1" ;;
    esac
    shift
done

rc=0
if [ ":${REPO_OWNER}" = ":" ] ; then
    echo "${PROG}: --owner value is required" >&2
    rc=1
fi
if [ ":${REPO_NAME}" = ":" ] ; then
    echo "${PROG}: --repo value is required" >&2
    rc=1
fi
if [ ":${RELEASE_TAG}" = ":" ] ; then
    echo "${PROG}: --tag value is required" >&2
    rc=1
fi
if [ $rc != 0 ] ; then
    exit $rc
fi

LIST_RELEASES_URL="https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases"

set curl -is -L \
     -H "Content-Type: text/plain" \
     -H "Accept: application/vnd.github.v3+json"
if [ ":$GH_TOKEN" != ":" ] ; then
    set "$@" -H "Authorization: token ${GH_TOKEN}"
fi

#
# Write intermediate files. This is primitive, but it helps when debugging.
# When NOT debugging, put the files in a temp dir and set up a trap to clean
# it up
#
TMPDIR="/tmp/$$.d"
mkdir -p "${TMPDIR}" || exit 1
trap "rm -rf ${TMPDIR} ; exit 1" 0 1 2 13 15

#
# We unfortunately cannot simply look up the release by tag, because the actual
# tag might have a valid suffix that we don't know. Instead, we need to list
# all releases and try to find a match on the leading part of the tag.
#
"$@" "${LIST_RELEASES_URL}" >${TMPDIR}/out || exit 1
read status <${TMPDIR}/out
case $status in
    *200*)
        # If the request succeeded, strip out the HTTP response header and
        # send the body to a separate temp file
        sed -n '/^\[/,$p' ${TMPDIR}/out >${TMPDIR}/body ;;
    *)
        echo "${PROG}: api query failed" >&2
        cat ${TMPDIR}/out >&2
        exit 1 ;;
esac

#
# The jq program below will generate output that looks like the following:
#  {"tag_name":"0.0.1","id":13545084}
#  {"tag_name":"","id":13457380}
#  {"tag_name":"0.0.2","id":13457242}
# The sed program finds a line with a matching name and extracts the id
#
jq -c '.[] | { tag_name, id }' <${TMPDIR}/body |
  sed -n 's/.*"tag_name":"'${RELEASE_TAG}'[-+"].*"id":\([0-9][0-9]*\)}/\1/p'

rm -rf ${TMPDIR}
trap "" 0

exit 0


