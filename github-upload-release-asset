#!/bin/sh
PROG=github-upload-release-asset
DESC="Upload a text file as a github \"release\" asset"
VERSION=0.1.0
USAGE1="${PROG} [--owner=<github_user>] [--repo=<repo>]
                            [--tag=<release_tag>] [--name=assetname] file"
USAGE2="${PROG} -h|--help"
USAGE3="${PROG} --version"
USAGE="Usage:
    ${USAGE1}
    ${USAGE2}
    ${USAGE3}"
SCRIPT_VERSION=0.0.1

HELP_TEXT="
NAME
    $PROG - $DESC

SYNOPSIS
    $USAGE1
    $USAGE2
    $USAGE3

DESCRIPTION
    Upload a file as an \"asset\" of a github project \"release\". If no asset
    name is explicit provided, the basename of the upload file is used. The
    file assumed to be a text file (media type test/plain).

    The script writes the response from github to standard output. Note that
    the release id can be extracted from this output using the jq following
    jq command:
        jq .id <outfile

    The following command-line options are supported:

    --owner=<github_user>
        The owner of the github repository. If not given, the REPO_OWNER and
        CIRCLE_PROJECT_USERNAME environment variables are both checked for a
        value; if no value can be found, the script will abort.

    --repo=<github_repo>
        The name of the github repository. If not given, the REPO_NAME and
        CIRCLE_PROJECT_REPONAME environment variables are both checked for a
        value; if no value can be found, the script will abort.

    --tag=<release_tag>
        The tag name of the github \"release\". If not given, the RELEASE_TAG
        and CIRCLE_TAG environment variables are both checked for a value; if
        no value can be found, the script will abort.

    -h|--help
        Print a help message and quit.

    --version
        Print the name and version of the script and quit.

ENVIRONMENT
    REPO_OWNER
    REPO_NAME
    RELEASE_TAG
        Primary defaults for the --owner, --repo, and --tag, respectively.

    CIRCLE_PROJECT_USERNAME
    CIRCLE_PROJECT_REPONAME
    CIRCLE_TAG
        Secondary defaults for the --owner, --repo, and --tag, respectively.

    GH_TOKEN
        A github token for a user having full repository access to the repo.
"
SCRIPTDIR=`cd \`dirname $0\`; pwd`
. ${SCRIPTDIR}/citools-basics.rc || exit 1

UPLOAD_URL=https://uploads.github.com

REPO_OWNER="${REPO_OWNER:-${CIRCLE_PROJECT_USERNAME}}"
REPO_NAME="${REPO_NAME:-${CIRCLE_PROJECT_REPONAME}}"
RELEASE_TAG="${RELEASE_TAG:-${CIRCLE_TAG}}"
ASSETFILE=
ASSETNAME=

while [ $# != 0 ] ; do
    case $1 in
      --owner=*)
          REPO_OWNER=`expr "$1" : "--owner=\(.*\)"` ;;
      --repo=*)
          REPO_NAME=`expr "$1" : "--repo=\(.*\)"` ;;
      --tag=*)
          RELEASE_TAG=`expr "$1" : "--tag=\(.*\)"` ;;
      --name=*)
          ASSETNAME=`expr "$1" : "--name=\(.*\)"` ;;
      -*)
          echo "${PROG}: unknown option: $1" >&2
          exit 1 ;;
      *)
          ASSETFILE="$1" ;;
    esac
    shift
done

rc=0
if [ ":${REPO_OWNER}" = ":" ] ; then
    echo "${PROG}: --owner value is required" >&2
    rc=1
fi
if [ ":${REPO_NAME}" = ":" ] ; then
    echo "${PROG}: --repo value is required" >&2
    rc=1
fi
if [ ":${RELEASE_TAG}" = ":" ] ; then
    echo "${PROG}: --tag value is required" >&2
    rc=1
fi
if [ ":${ASSETFILE}" = ":" ] ; then
    echo "${PROG}: filename argument is required" >&2
    rc=1
elif [ ! -f "${ASSETFILE}" ] ; then
    echo "${PROG}: ${ASSETFILE}: no such file" >&2
    rc=1
fi
if [ $rc != 0 ] ; then
    exit $rc
fi
if [ ":${ASSETNAME}" = ":" ] ; then
    ASSETNAME=`basename "${ASSETFILE}"`
fi

GET_RELEASE_URL="https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases/tags/$RELEASE_TAG"
POST_ASSET_URL="${UPLOAD_URL}/repos/$REPO_OWNER/$REPO_NAME/releases"

set : -L \
     -H "Content-Type: text/plain" \
     -H "Accept: application/vnd.github.v3+json" \
     -H "Authorization: token $GH_TOKEN"
shift

id=`curl -s "$@" "${GET_RELEASE_URL}" | jq '.id'`

if [ "${id}" = "null" ] ; then
    echo "${PROG}: unable to retrieve release id" >&2
    echo "URL=${GET_RELEASE_URL}" >&2
    echo "Output from retry: " >&2
    curl -i "$@" "${GET_RELEASE_URL}" >&2
    exit 1
fi

curl -X POST "$@" \
     --data-raw "${ASSET}" \
  "${POST_ASSET_URL}/${id}/assets?name=${ASSETNAME}" | jq .

exit 0


