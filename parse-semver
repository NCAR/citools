#!/bin/sh
PROG="parse-semver"
DESC="Parse semantic version strings"
USAGE1="${PROG} [-i] [-n] [-p] [-m] [-v] version_str"
USAGE2="${PROG} -h|--help"

HELP_TEXT="
        This script parses a given supposed semantic version string and writes
        one or more of the components to standard output. If the input string
        is not a valid semantic version string, nothing is written and 1 is
        returned. If it is a valid semantic version string, 0 is returned.

        Note that a leading \"v\" or \"V\" in the input string is allowed, but
        ignored.

        The following options are supported:

        -i
            Print the input string (if it is valid).

        -n
            Print the numeric component (major.minor.patch).

        -p
            Print the prerelease component, with its leading \"-\".

        -m
           Print the metadata component, with its leading \"+\".

        -v
            Print major.minor.patch, major.minor, and major as separate string.

        -h|--help
            Print help text and quit.

        When more than one of the -n, -p, -m options are given, the components
        are printed consecutively with no intervening spaces. For example,
        \"-np\" would cause \"1.0.0-beta+build2\" to be transformed to
        \"1.0.0-beta\".

        If -i is given along with -n, -p, or -m, its value is always written
        before the other components and separated from them by a space.

        If -v is given along with -n, -p, or -m, its value is always written
        after the other components and separated from them by a space.
"

SCRIPTDIR=`cd \`dirname $0\`; pwd`

HELP=n
NUMERIC=n
PRERELEASE=n
METADATA=n
INVAL=n
SEMVER=
ENV=
VERSIONS=
while [ $# != 0 ] ; do
    arg="$1"
    shift
    case $arg in
      --help)
          HELP=y ;;
      -??*)
          narg=`expr "$arg" : '\(-.\).*'`
          rest=`expr "$arg" : '-.\(.*\)'`
          set : "${narg}" "-${rest}" "$@"
          shift ;;
      -h)
            HELP=y ;;
      -i)
        INVAL=y ;;
      -n)
        NUMERIC=y ;;
      -p)
        PRERELEASE=y ;;
      -m)
        METADATA=y ;;
      -v)
        VERSIONS=y ;;
      -*)
        echo "{$PROG}: unknown option: $1" >&2
        exit 1 ;;
      *)
        SEMVER="${arg}"
    esac
done
if [ $HELP = y ] ; then
    cat <<EOF
NAME
        $PROG - $DESC

SYNOPSIS
        $USAGE1
        $USAGE2

DESCRIPTION$HELP_TEXT
EOF
        exit 0
fi

if [ ":$SEMVER" = ":" ] ; then
    echo "${PROG}: version string argument is required" >&2
    exit 1
fi

#
# This is a strict check of semantic version correctness, except we allow a
# leading "v" or "V"
#
echo "${SEMVER}" | egrep '^[vV]?[0-9]+\.[0-9]+\.[0-9]+(-[-1-9A-za-z][-0-9A-za-z]*(\.[-1-9A-za-z][-0-9A-za-z]*)*)?(\+[-0-9A-Za-z]+(\.[-0-9A-Za-z]+)*)?$' >/dev/null
rc=$?
if [ "$rc" != 0 ] ; then
    exit $rc
fi

OUTVAL=
if [ $NUMERIC = y ] ; then
    OUTVAL=`expr "${SEMVER}" : '[vV]*\([^-+]*\).*'`
fi
if [ $PRERELEASE = y ] ; then
    OUTVAL=${OUTVAL}`expr "${SEMVER}" : '[^-]*\(-[^+]*\).*'`
fi
if [ $METADATA = y ] ; then
    OUTVAL=${OUTVAL}`expr "${SEMVER}" : '[^+]*\([+].*\)'`
fi
set :
if [ $INVAL = y ] ; then
    set "$@" "${SEMVER}"
fi
set "$@" ${OUTVAL}
if [ ":${VERSIONS}" = ":y" ] ; then
    MMP=`expr "${SEMVER}" : '[vV]*\([^-+]*\).*'`
    MM=`expr "${MMP}" : '\([0-9]*\.[0-9]*\)\..*'`
    M=`expr "${MM}" : '\([0-9]*\)\..*'`
    set "$@" ${MMP} "${MM}" "${M}"
fi
shift
if [ $# != 0 ] ; then
    echo "$@"
fi

exit 0

