#!/bin/sh
PROG="sw-manifest"
DESC="Print a list of installed software on a linux host"
USAGE1="${PROG}"
USAGE2="${PROG} <docker_image>"
HELP_DESC="
Print a list of installed software on a linux host, including the output
of \"uname -mvr\", the distro version, and all packages reported by the
resident package manager.
"
HELP_ARGS="
<docker-image>
    If a non-option argument is given, it is assumed to be the name of
    a local docker image; a temporary container is created and the
    script is run inside the container.
"
SCRIPTDIR=`cd \`dirname $0\`; pwd`
. ${SCRIPTDIR}/citools-basics.rc || exit 1

case $1 in
    -*)
        echo "${PROG}: unknown option: $1" >&2
        exit 1 ;;

    '')
        : ;;
    *)
        docker run --rm -u root --entrypoint=/bin/sh \
            --volume="${SCRIPTDIR}/${PROG}:/tmp/${PROG}" \
            "$1" "/tmp/${PROG}"
        exit $? ;;
esac

# 
KNOWN_RELEASEFILES="
  alpine-release
  centos-release
  fedora-release
  oracle-release
  redhat-release
  debian_version
  SuSE-release
  arch-release
"
KNOWN_PACKAGE_COMMANDS="
  apk
  rpm
  apt
  dpkg-query
  pacman
  nix-env
  busybox
"

RELEASE_FILE=
PACKAGE_MANAGER=

kernel=`uname -mvr`
echo "kernel: ${kernel}"

cd /etc/
for releasefile in ${KNOWN_RELEASEFILES} ; do
    if [ -f ${releasefile} ] ; then
        read release <${releasefile}
        echo "distro: ${releasefile}: ${release}"
        break
    fi
done
cd /
for cmd in ${KNOWN_PACKAGE_COMMANDS} ; do
    found=`type ${cmd} 2>&1`
    case $found in
        *not\ found*)
            : ;;
        *)
            echo "packages (${cmd}):"
            case ${cmd} in
              apk) 
                  apk info -vv 2>&1 | sed -e 's/ - .*//' | sort | \
                    grep -v 'WARNING: ' ;;
              rpm)
                  rpm -qa | sort ;;
              apt)
                  apt list --installed ;;
              dpkg-query)
                  dpkg-query -W ;;
              pacman)
                  pacman -Q ;;
              nix-env)
                  nix-env -q ;;
              busybox)
                  v=`busybox | head -1`
                  c=`busybox --list | tr '\n' ','`
                  echo "$v: $c" ;;
            esac ;;
    esac
done

exit 0
